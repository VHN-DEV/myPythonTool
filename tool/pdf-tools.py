#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tool: C√¥ng c·ª• x·ª≠ l√Ω PDF ƒëa nƒÉng
M·ª•c ƒë√≠ch: Merge, split, compress, convert PDF
"""

import os
import sys
from pathlib import Path


def print_header():
    """In header c·ªßa tool"""
    print("=" * 60)
    print("  TOOL XU LY PDF")
    print("=" * 60)
    print()


def check_dependencies():
    """
    Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
    
    M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o user ƒë√£ c√†i ƒë·ªß th∆∞ vi·ªán
    L√Ω do: PyPDF2 v√† Pillow c·∫ßn thi·∫øt cho tool
    """
    try:
        import PyPDF2
    except ImportError:
        print("‚ùå Thieu thu vien PyPDF2!")
        print("Cai dat: pip install PyPDF2")
        return False
    
    try:
        from PIL import Image
    except ImportError:
        print("‚ùå Thieu thu vien Pillow!")
        print("Cai dat: pip install Pillow")
        return False
    
    return True


def format_size(size_bytes):
    """Format dung l∆∞·ª£ng d·ªÖ ƒë·ªçc"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024.0


def merge_pdfs(input_files, output_file):
    """
    G·ªôp nhi·ªÅu PDF th√†nh 1 file
    
    Args:
        input_files: Danh s√°ch ƒë∆∞·ªùng d·∫´n PDF
        output_file: ƒê∆∞·ªùng d·∫´n file output
    
    Gi·∫£i th√≠ch:
    - D√πng PdfMerger ƒë·ªÉ g·ªôp PDF
    - Gi·ªØ nguy√™n bookmarks v√† metadata
    - Hi·ªÉn th·ªã progress
    """
    import PyPDF2
    
    try:
        print(f"\nüì¶ Dang gop {len(input_files)} file PDF...\n")
        
        merger = PyPDF2.PdfMerger()
        
        for idx, pdf_file in enumerate(input_files, 1):
            if not os.path.exists(pdf_file):
                print(f"‚ö†Ô∏è  File khong ton tai: {pdf_file}")
                continue
            
            print(f"   [{idx}/{len(input_files)}] Dang xu ly: {os.path.basename(pdf_file)}")
            merger.append(pdf_file)
        
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        os.makedirs(os.path.dirname(output_file) if os.path.dirname(output_file) else ".", exist_ok=True)
        
        merger.write(output_file)
        merger.close()
        
        output_size = os.path.getsize(output_file)
        
        print(f"\n‚úÖ Gop thanh cong!")
        print(f"   üìÑ File output: {output_file}")
        print(f"   üìä Kich thuoc: {format_size(output_size)}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi gop PDF: {e}")
        return False


def split_pdf(input_file, output_folder, mode='all', page_ranges=None):
    """
    T√°ch PDF th√†nh nhi·ªÅu file
    
    Args:
        input_file: File PDF c·∫ßn t√°ch
        output_folder: Th∆∞ m·ª•c ch·ª©a file output
        mode: 'all' (m·ªói trang 1 file), 'range' (theo range)
        page_ranges: [(start, end), ...] n·∫øu mode='range'
    
    Gi·∫£i th√≠ch:
    - mode='all': T√°ch m·ªói trang th√†nh 1 file ri√™ng
    - mode='range': T√°ch theo range ch·ªâ ƒë·ªãnh (vd: 1-5, 6-10)
    """
    import PyPDF2
    
    try:
        print(f"\n‚úÇÔ∏è  Dang tach PDF...\n")
        
        reader = PyPDF2.PdfReader(input_file)
        total_pages = len(reader.pages)
        
        print(f"   üìÑ File: {os.path.basename(input_file)}")
        print(f"   üìä Tong so trang: {total_pages}\n")
        
        # T·∫°o th∆∞ m·ª•c output
        os.makedirs(output_folder, exist_ok=True)
        
        base_name = Path(input_file).stem
        
        if mode == 'all':
            # T√°ch t·ª´ng trang
            for page_num in range(total_pages):
                writer = PyPDF2.PdfWriter()
                writer.add_page(reader.pages[page_num])
                
                output_file = os.path.join(output_folder, f"{base_name}_page_{page_num + 1}.pdf")
                
                with open(output_file, 'wb') as output:
                    writer.write(output)
                
                print(f"   ‚úì Trang {page_num + 1}/{total_pages}: {os.path.basename(output_file)}")
            
            print(f"\n‚úÖ Tach thanh cong {total_pages} trang!")
            
        elif mode == 'range' and page_ranges:
            # T√°ch theo range
            for idx, (start, end) in enumerate(page_ranges, 1):
                # Validate range
                if start < 1 or end > total_pages or start > end:
                    print(f"‚ö†Ô∏è  Range khong hop le: {start}-{end}")
                    continue
                
                writer = PyPDF2.PdfWriter()
                
                for page_num in range(start - 1, end):
                    writer.add_page(reader.pages[page_num])
                
                output_file = os.path.join(output_folder, f"{base_name}_pages_{start}-{end}.pdf")
                
                with open(output_file, 'wb') as output:
                    writer.write(output)
                
                print(f"   ‚úì Range {start}-{end}: {os.path.basename(output_file)}")
            
            print(f"\n‚úÖ Tach thanh cong {len(page_ranges)} range!")
        
        print(f"   üìÅ Thu muc output: {output_folder}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi tach PDF: {e}")
        return False


def compress_pdf(input_file, output_file, compression_level='medium'):
    """
    N√©n PDF gi·∫£m dung l∆∞·ª£ng
    
    Args:
        input_file: File PDF c·∫ßn n√©n
        output_file: File output
        compression_level: 'low', 'medium', 'high'
    
    Gi·∫£i th√≠ch:
    - N√©n b·∫±ng c√°ch gi·∫£m ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh
    - Remove metadata kh√¥ng c·∫ßn thi·∫øt
    - Optimize structure
    """
    import PyPDF2
    
    try:
        print(f"\nüì¶ Dang nen PDF...\n")
        
        reader = PyPDF2.PdfReader(input_file)
        writer = PyPDF2.PdfWriter()
        
        # Copy pages
        for page in reader.pages:
            # Compress images in page
            page.compress_content_streams()
            writer.add_page(page)
        
        # Remove metadata to reduce size
        writer.add_metadata({
            '/Producer': 'myPythonTool PDF Compressor',
        })
        
        # Write compressed PDF
        with open(output_file, 'wb') as output:
            writer.write(output)
        
        # So s√°nh k√≠ch th∆∞·ªõc
        original_size = os.path.getsize(input_file)
        compressed_size = os.path.getsize(output_file)
        reduction = ((original_size - compressed_size) / original_size) * 100
        
        print(f"‚úÖ Nen thanh cong!")
        print(f"   üìÑ File goc: {format_size(original_size)}")
        print(f"   üìÑ File nen: {format_size(compressed_size)}")
        print(f"   üíØ Giam: {reduction:.1f}%")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi nen PDF: {e}")
        return False


def pdf_to_images(input_file, output_folder, image_format='PNG', dpi=200):
    """
    Chuy·ªÉn PDF th√†nh ·∫£nh
    
    Args:
        input_file: File PDF
        output_folder: Th∆∞ m·ª•c ch·ª©a ·∫£nh
        image_format: 'PNG', 'JPEG'
        dpi: ƒê·ªô ph√¢n gi·∫£i (72-300)
    
    Gi·∫£i th√≠ch:
    - Render t·ª´ng trang PDF th√†nh ·∫£nh
    - DPI c√†ng cao th√¨ ·∫£nh c√†ng s·∫Øc n√©t nh∆∞ng n·∫∑ng h∆°n
    """
    try:
        from pdf2image import convert_from_path
    except ImportError:
        print("‚ùå Thieu thu vien pdf2image!")
        print("Cai dat: pip install pdf2image")
        print("Luu y: Can cai them poppler-utils")
        return False
    
    try:
        print(f"\nüñºÔ∏è  Dang chuyen PDF sang anh...\n")
        print(f"   DPI: {dpi}")
        print(f"   Format: {image_format}\n")
        
        # Convert PDF to images
        images = convert_from_path(input_file, dpi=dpi)
        
        # T·∫°o th∆∞ m·ª•c output
        os.makedirs(output_folder, exist_ok=True)
        
        base_name = Path(input_file).stem
        
        for idx, image in enumerate(images, 1):
            output_file = os.path.join(
                output_folder, 
                f"{base_name}_page_{idx}.{image_format.lower()}"
            )
            
            image.save(output_file, image_format)
            
            size = os.path.getsize(output_file)
            print(f"   ‚úì Trang {idx}/{len(images)}: {os.path.basename(output_file)} ({format_size(size)})")
        
        print(f"\n‚úÖ Chuyen doi thanh cong {len(images)} trang!")
        print(f"   üìÅ Thu muc output: {output_folder}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi chuyen doi: {e}")
        if "poppler" in str(e).lower():
            print("\nüí° Luu y: Tool nay can cai them Poppler")
            print("   Windows: Download tai https://github.com/oschwartz10612/poppler-windows/releases")
            print("   Linux: sudo apt-get install poppler-utils")
            print("   macOS: brew install poppler")
        return False


def rotate_pdf(input_file, output_file, rotation=90, pages='all'):
    """
    Xoay trang PDF
    
    Args:
        input_file: File PDF
        output_file: File output
        rotation: G√≥c xoay (90, 180, 270)
        pages: 'all' ho·∫∑c list s·ªë trang [1, 2, 3]
    
    Gi·∫£i th√≠ch:
    - Xoay PDF theo chi·ªÅu kim ƒë·ªìng h·ªì
    - C√≥ th·ªÉ xoay t·∫•t c·∫£ ho·∫∑c ch·ªâ m·ªôt s·ªë trang
    """
    import PyPDF2
    
    try:
        print(f"\nüîÑ Dang xoay PDF {rotation}¬∞...\n")
        
        reader = PyPDF2.PdfReader(input_file)
        writer = PyPDF2.PdfWriter()
        
        total_pages = len(reader.pages)
        
        for page_num in range(total_pages):
            page = reader.pages[page_num]
            
            # Ki·ªÉm tra c√≥ xoay trang n√†y kh√¥ng
            if pages == 'all' or (page_num + 1) in pages:
                page.rotate(rotation)
                print(f"   ‚úì Xoay trang {page_num + 1}")
            
            writer.add_page(page)
        
        with open(output_file, 'wb') as output:
            writer.write(output)
        
        print(f"\n‚úÖ Xoay thanh cong!")
        print(f"   üìÑ File output: {output_file}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi xoay PDF: {e}")
        return False


def extract_text_from_pdf(input_file, output_file=None):
    """
    Tr√≠ch xu·∫•t text t·ª´ PDF
    
    Args:
        input_file: File PDF
        output_file: File text output (None = print ra m√†n h√¨nh)
    
    Gi·∫£i th√≠ch:
    - Extract text t·ª´ m·ªói trang
    - L∆∞u v√†o file ho·∫∑c in ra m√†n h√¨nh
    """
    import PyPDF2
    
    try:
        print(f"\nüìù Dang trich xuat text...\n")
        
        reader = PyPDF2.PdfReader(input_file)
        total_pages = len(reader.pages)
        
        all_text = []
        
        for page_num in range(total_pages):
            page = reader.pages[page_num]
            text = page.extract_text()
            
            if text.strip():
                all_text.append(f"=== Trang {page_num + 1} ===\n{text}\n")
                print(f"   ‚úì Trang {page_num + 1}: {len(text)} ky tu")
            else:
                print(f"   ‚ö†Ô∏è  Trang {page_num + 1}: Khong co text")
        
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(all_text))
            
            print(f"\n‚úÖ Trich xuat thanh cong!")
            print(f"   üìÑ File output: {output_file}")
        else:
            print(f"\n‚úÖ Trich xuat thanh cong!")
            print("\n" + "="*60)
            print('\n'.join(all_text[:500]))  # Hi·ªÉn th·ªã 500 k√Ω t·ª± ƒë·∫ßu
            if len('\n'.join(all_text)) > 500:
                print("\n... (con nua)")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi trich xuat text: {e}")
        return False


def get_pdf_info(input_file):
    """
    L·∫•y th√¥ng tin PDF
    
    Gi·∫£i th√≠ch:
    - S·ªë trang
    - Metadata
    - K√≠ch th∆∞·ªõc file
    """
    import PyPDF2
    
    try:
        reader = PyPDF2.PdfReader(input_file)
        
        print(f"\nüìÑ Thong tin PDF: {os.path.basename(input_file)}")
        print("=" * 60)
        
        # Basic info
        print(f"So trang: {len(reader.pages)}")
        print(f"Kich thuoc: {format_size(os.path.getsize(input_file))}")
        
        # Metadata
        if reader.metadata:
            print(f"\nMetadata:")
            for key, value in reader.metadata.items():
                if value:
                    print(f"  {key}: {value}")
        
        # Page size (first page)
        if len(reader.pages) > 0:
            page = reader.pages[0]
            width = float(page.mediabox.width) * 0.352778  # Convert to mm
            height = float(page.mediabox.height) * 0.352778
            print(f"\nKich thuoc trang: {width:.0f}mm x {height:.0f}mm")
        
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi doc thong tin PDF: {e}")
        return False


def main():
    """
    H√†m ch√≠nh - Menu PDF tools
    
    Gi·∫£i th√≠ch:
    - Hi·ªÉn th·ªã menu c√°c ch·ª©c nƒÉng
    - X·ª≠ l√Ω input t·ª´ user
    - G·ªçi h√†m t∆∞∆°ng ·ª©ng
    """
    print_header()
    
    # Ki·ªÉm tra dependencies
    if not check_dependencies():
        return
    
    print("===== CHUC NANG =====")
    print("1. Gop PDF (Merge)")
    print("2. Tach PDF (Split)")
    print("3. Nen PDF (Compress)")
    print("4. PDF sang Anh (PDF to Images)")
    print("5. Xoay PDF (Rotate)")
    print("6. Trich xuat Text")
    print("7. Xem thong tin PDF")
    print("0. Thoat")
    
    choice = input("\nChon chuc nang (0-7): ").strip()
    
    if choice == "0":
        print("Thoat chuong trinh.")
        return
    
    elif choice == "1":
        # Merge PDFs
        print("\n===== GOP PDF =====")
        
        folder_input = input("Nhap duong dan thu muc chua PDF: ").strip('"')
        if not os.path.isdir(folder_input):
            print("‚ùå Thu muc khong ton tai!")
            return
        
        # T√¨m t·∫•t c·∫£ PDF trong th∆∞ m·ª•c
        pdf_files = [
            os.path.join(folder_input, f) 
            for f in os.listdir(folder_input) 
            if f.lower().endswith('.pdf')
        ]
        
        if not pdf_files:
            print("‚ùå Khong tim thay file PDF nao!")
            return
        
        pdf_files.sort()
        
        print(f"\nTim thay {len(pdf_files)} file PDF:")
        for idx, pdf in enumerate(pdf_files, 1):
            size = format_size(os.path.getsize(pdf))
            print(f"  {idx}. {os.path.basename(pdf)} ({size})")
        
        output_name = input("\nNhap ten file output (vd: merged.pdf): ").strip()
        if not output_name.endswith('.pdf'):
            output_name += '.pdf'
        
        output_file = os.path.join(folder_input, output_name)
        
        merge_pdfs(pdf_files, output_file)
    
    elif choice == "2":
        # Split PDF
        print("\n===== TACH PDF =====")
        
        input_file = input("Nhap duong dan file PDF: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        output_folder = input("Thu muc output (Enter de tao thu muc 'split'): ").strip('"')
        if not output_folder:
            output_folder = os.path.join(os.path.dirname(input_file), 'split')
        
        print("\n1. Tach tung trang (moi trang 1 file)")
        print("2. Tach theo range (vd: 1-5, 6-10)")
        
        split_mode = input("\nChon che do (1-2): ").strip()
        
        if split_mode == "1":
            split_pdf(input_file, output_folder, mode='all')
        
        elif split_mode == "2":
            range_input = input("Nhap range (vd: 1-5, 6-10, 11-15): ").strip()
            ranges = []
            
            for r in range_input.split(','):
                r = r.strip()
                if '-' in r:
                    start, end = r.split('-')
                    ranges.append((int(start), int(end)))
            
            if ranges:
                split_pdf(input_file, output_folder, mode='range', page_ranges=ranges)
            else:
                print("‚ùå Range khong hop le!")
    
    elif choice == "3":
        # Compress PDF
        print("\n===== NEN PDF =====")
        
        input_file = input("Nhap duong dan file PDF: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        output_file = input("Ten file output (Enter de them '_compressed'): ").strip('"')
        if not output_file:
            base = Path(input_file).stem
            ext = Path(input_file).suffix
            output_file = os.path.join(
                os.path.dirname(input_file),
                f"{base}_compressed{ext}"
            )
        
        compress_pdf(input_file, output_file)
    
    elif choice == "4":
        # PDF to Images
        print("\n===== PDF SANG ANH =====")
        
        input_file = input("Nhap duong dan file PDF: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        output_folder = input("Thu muc output (Enter de tao thu muc 'images'): ").strip('"')
        if not output_folder:
            output_folder = os.path.join(os.path.dirname(input_file), 'images')
        
        format_choice = input("Dinh dang anh (PNG/JPEG, mac dinh PNG): ").strip().upper()
        if format_choice not in ['PNG', 'JPEG']:
            format_choice = 'PNG'
        
        dpi_input = input("DPI (72-300, mac dinh 200): ").strip()
        dpi = int(dpi_input) if dpi_input and dpi_input.isdigit() else 200
        
        pdf_to_images(input_file, output_folder, format_choice, dpi)
    
    elif choice == "5":
        # Rotate PDF
        print("\n===== XOAY PDF =====")
        
        input_file = input("Nhap duong dan file PDF: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        rotation_input = input("Goc xoay (90/180/270, mac dinh 90): ").strip()
        rotation = int(rotation_input) if rotation_input in ['90', '180', '270'] else 90
        
        output_file = input("Ten file output (Enter de them '_rotated'): ").strip('"')
        if not output_file:
            base = Path(input_file).stem
            ext = Path(input_file).suffix
            output_file = os.path.join(
                os.path.dirname(input_file),
                f"{base}_rotated{ext}"
            )
        
        rotate_pdf(input_file, output_file, rotation)
    
    elif choice == "6":
        # Extract text
        print("\n===== TRICH XUAT TEXT =====")
        
        input_file = input("Nhap duong dan file PDF: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        save_choice = input("Luu ra file? (y/N): ").strip().lower()
        
        if save_choice == 'y':
            output_file = input("Ten file output (Enter de dung 'extracted_text.txt'): ").strip()
            if not output_file:
                output_file = os.path.join(
                    os.path.dirname(input_file),
                    'extracted_text.txt'
                )
            extract_text_from_pdf(input_file, output_file)
        else:
            extract_text_from_pdf(input_file)
    
    elif choice == "7":
        # Get PDF info
        print("\n===== THONG TIN PDF =====")
        
        input_file = input("Nhap duong dan file PDF: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        get_pdf_info(input_file)
    
    else:
        print("‚ùå Lua chon khong hop le!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Da huy!")
    except Exception as e:
        print(f"\n‚ùå Loi: {e}")

