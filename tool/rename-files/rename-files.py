#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tool: ƒê·ªïi t√™n h√†ng lo·∫°t file theo pattern
"""

import os
import re
from pathlib import Path


def print_header():
    print("=" * 60)
    print("  TOOL ƒê·ªîI T√äN H√ÄNG LO·∫†T FILE")
    print("=" * 60)
    print()


def rename_add_prefix(folder_path, prefix, file_extensions):
    """Th√™m prefix v√†o ƒë·∫ßu t√™n file"""
    count = 0
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        if os.path.isfile(file_path):
            if not file_extensions or any(file.lower().endswith(ext) for ext in file_extensions):
                new_name = prefix + file
                new_path = os.path.join(folder_path, new_name)
                os.rename(file_path, new_path)
                print(f"‚úì {file} ‚Üí {new_name}")
                count += 1
    return count


def rename_add_suffix(folder_path, suffix, file_extensions):
    """Th√™m suffix v√†o tr∆∞·ªõc ph·∫ßn m·ªü r·ªông"""
    count = 0
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        if os.path.isfile(file_path):
            if not file_extensions or any(file.lower().endswith(ext) for ext in file_extensions):
                name, ext = os.path.splitext(file)
                new_name = name + suffix + ext
                new_path = os.path.join(folder_path, new_name)
                os.rename(file_path, new_path)
                print(f"‚úì {file} ‚Üí {new_name}")
                count += 1
    return count


def rename_replace_text(folder_path, old_text, new_text, file_extensions):
    """Thay th·∫ø text trong t√™n file"""
    count = 0
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        if os.path.isfile(file_path):
            if not file_extensions or any(file.lower().endswith(ext) for ext in file_extensions):
                if old_text in file:
                    new_name = file.replace(old_text, new_text)
                    new_path = os.path.join(folder_path, new_name)
                    os.rename(file_path, new_path)
                    print(f"‚úì {file} ‚Üí {new_name}")
                    count += 1
    return count


def rename_sequential(folder_path, base_name, start_num, file_extensions):
    """ƒê·ªïi t√™n file theo s·ªë th·ª© t·ª±"""
    count = 0
    files = []
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        if os.path.isfile(file_path):
            if not file_extensions or any(file.lower().endswith(ext) for ext in file_extensions):
                files.append(file)
    
    files.sort()  # S·∫Øp x·∫øp theo th·ª© t·ª±
    
    for idx, file in enumerate(files, start=start_num):
        file_path = os.path.join(folder_path, file)
        ext = os.path.splitext(file)[1]
        new_name = f"{base_name}_{idx:03d}{ext}"
        new_path = os.path.join(folder_path, new_name)
        os.rename(file_path, new_path)
        print(f"‚úì {file} ‚Üí {new_name}")
        count += 1
    
    return count


def rename_change_extension(folder_path, old_ext, new_ext):
    """ƒê·ªïi ph·∫ßn m·ªü r·ªông file"""
    count = 0
    old_ext = old_ext.lower()
    if not old_ext.startswith('.'):
        old_ext = '.' + old_ext
    if not new_ext.startswith('.'):
        new_ext = '.' + new_ext
    
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        if os.path.isfile(file_path) and file.lower().endswith(old_ext):
            name = os.path.splitext(file)[0]
            new_name = name + new_ext
            new_path = os.path.join(folder_path, new_name)
            os.rename(file_path, new_path)
            print(f"‚úì {file} ‚Üí {new_name}")
            count += 1
    return count


def rename_to_lowercase(folder_path, file_extensions):
    """Chuy·ªÉn t√™n file sang ch·ªØ th∆∞·ªùng"""
    count = 0
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        if os.path.isfile(file_path):
            if not file_extensions or any(file.lower().endswith(ext) for ext in file_extensions):
                new_name = file.lower()
                if new_name != file:
                    new_path = os.path.join(folder_path, new_name)
                    os.rename(file_path, new_path)
                    print(f"‚úì {file} ‚Üí {new_name}")
                    count += 1
    return count


def rename_remove_spaces(folder_path, replacement, file_extensions):
    """X√≥a ho·∫∑c thay th·∫ø kho·∫£ng tr·∫Øng"""
    count = 0
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        if os.path.isfile(file_path):
            if not file_extensions or any(file.lower().endswith(ext) for ext in file_extensions):
                if ' ' in file:
                    new_name = file.replace(' ', replacement)
                    new_path = os.path.join(folder_path, new_name)
                    os.rename(file_path, new_path)
                    print(f"‚úì {file} ‚Üí {new_name}")
                    count += 1
    return count


def main():
    print_header()
    
    # Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c
    folder_input = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file: ").strip('"')
    if not folder_input or not os.path.isdir(folder_input):
        print("‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!")
        return
    
    # Hi·ªÉn th·ªã menu ch·ª©c nƒÉng
    print("\n===== CH·ªåN CH·ª®C NƒÇNG =====")
    print("1. Th√™m prefix (ti·ªÅn t·ªë) v√†o ƒë·∫ßu t√™n file")
    print("2. Th√™m suffix (h·∫≠u t·ªë) v√†o cu·ªëi t√™n file")
    print("3. Thay th·∫ø text trong t√™n file")
    print("4. ƒê·ªïi t√™n file theo s·ªë th·ª© t·ª±")
    print("5. ƒê·ªïi ph·∫ßn m·ªü r·ªông file")
    print("6. Chuy·ªÉn t·∫•t c·∫£ sang ch·ªØ th∆∞·ªùng")
    print("7. X√≥a ho·∫∑c thay th·∫ø kho·∫£ng tr·∫Øng")
    print("0. Tho√°t")
    
    choice = input("\nCh·ªçn ch·ª©c nƒÉng (0-7): ").strip()
    
    if choice == "0":
        print("Tho√°t ch∆∞∆°ng tr√¨nh.")
        return
    
    # H·ªèi lo·∫°i file c·∫ßn x·ª≠ l√Ω
    ext_input = input("\nCh·ªâ x·ª≠ l√Ω file c√≥ ƒëu√¥i (vd: .jpg .png - Enter ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£): ").strip()
    file_extensions = [ext.strip() for ext in ext_input.split()] if ext_input else []
    
    print(f"\nüìÇ Th∆∞ m·ª•c: {folder_input}")
    print("üîÑ B·∫Øt ƒë·∫ßu ƒë·ªïi t√™n...\n")
    
    count = 0
    
    if choice == "1":
        prefix = input("Nh·∫≠p prefix (ti·ªÅn t·ªë): ")
        count = rename_add_prefix(folder_input, prefix, file_extensions)
    
    elif choice == "2":
        suffix = input("Nh·∫≠p suffix (h·∫≠u t·ªë): ")
        count = rename_add_suffix(folder_input, suffix, file_extensions)
    
    elif choice == "3":
        old_text = input("Nh·∫≠p text c·∫ßn thay th·∫ø: ")
        new_text = input("Nh·∫≠p text m·ªõi: ")
        count = rename_replace_text(folder_input, old_text, new_text, file_extensions)
    
    elif choice == "4":
        base_name = input("Nh·∫≠p t√™n c∆° s·ªü (vd: image): ")
        start_num = int(input("B·∫Øt ƒë·∫ßu t·ª´ s·ªë (vd: 1): ") or "1")
        count = rename_sequential(folder_input, base_name, start_num, file_extensions)
    
    elif choice == "5":
        old_ext = input("Nh·∫≠p ƒëu√¥i c≈© (vd: txt): ")
        new_ext = input("Nh·∫≠p ƒëu√¥i m·ªõi (vd: md): ")
        count = rename_change_extension(folder_input, old_ext, new_ext)
    
    elif choice == "6":
        count = rename_to_lowercase(folder_input, file_extensions)
    
    elif choice == "7":
        replacement = input("Thay kho·∫£ng tr·∫Øng b·∫±ng g√¨? (vd: _ ho·∫∑c - , Enter ƒë·ªÉ x√≥a): ")
        count = rename_remove_spaces(folder_input, replacement, file_extensions)
    
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
        return
    
    print(f"\n‚úÖ Ho√†n th√†nh! ƒê√£ ƒë·ªïi t√™n {count} file.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå ƒê√£ h·ªßy!")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")

