#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tool: N√©n v√† ch·ªânh s·ª≠a ·∫£nh h√†ng lo·∫°t

M·ª•c ƒë√≠ch: Gi·∫£m dung l∆∞·ª£ng ·∫£nh, resize, ƒë·ªïi format
L√Ω do: T·ªëi ∆∞u ·∫£nh cho web, ti·∫øt ki·ªám dung l∆∞·ª£ng
"""

import os
import sys
import datetime
import argparse
from pathlib import Path
from typing import Optional, Tuple, List
from concurrent.futures import ProcessPoolExecutor, as_completed

# Th√™m th∆∞ m·ª•c cha v√†o sys.path ƒë·ªÉ import utils
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils import (
    print_header, format_size, get_user_input, confirm_action,
    get_file_list, ensure_directory_exists, ProgressBar, 
    log_info, log_error, setup_logger, normalize_path
)

# Ki·ªÉm tra th∆∞ vi·ªán PIL
try:
    from PIL import Image
except ImportError:
    print("‚ùå Thi·∫øu th∆∞ vi·ªán Pillow!")
    print("C√†i ƒë·∫∑t: pip install Pillow")
    sys.exit(1)


def compress_single_image(
    input_path: str,
    output_path: str,
    quality: int = 70,
    optimize: bool = True,
    max_size_kb: Optional[int] = None,
    convert_format: Optional[str] = None,
    resize_width: Optional[int] = None,
    resize_height: Optional[int] = None
) -> Tuple[bool, str, int, int]:
    """
    N√©n v√† x·ª≠ l√Ω m·ªôt ·∫£nh
    
    Args:
        input_path: ƒê∆∞·ªùng d·∫´n ·∫£nh g·ªëc
        output_path: ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·∫ßu ra
        quality: Ch·∫•t l∆∞·ª£ng n√©n (1-100)
        optimize: C√≥ optimize kh√¥ng
        max_size_kb: Dung l∆∞·ª£ng t·ªëi ƒëa (KB)
        convert_format: ƒê·ªãnh d·∫°ng ƒë√≠ch (jpg, png, webp)
        resize_width: Chi·ªÅu r·ªông m·ªõi (None = gi·ªØ nguy√™n)
        resize_height: Chi·ªÅu cao m·ªõi (None = gi·ªØ nguy√™n)
    
    Returns:
        tuple: (success, message, old_size, new_size)
    
    Gi·∫£i th√≠ch:
    - M·ªü ·∫£nh v√† x·ª≠ l√Ω resize n·∫øu c·∫ßn
    - ƒê·ªïi format n·∫øu c·∫ßn
    - N√©n v·ªõi quality ch·ªâ ƒë·ªãnh
    - N·∫øu c√≥ max_size_kb, gi·∫£m d·∫ßn quality cho ƒë·∫øn khi ƒë·∫°t
    - Tr·∫£ v·ªÅ k·∫øt qu·∫£ v√† k√≠ch th∆∞·ªõc file
    """
    try:
        # B∆∞·ªõc 1: M·ªü ·∫£nh g·ªëc
        img = Image.open(input_path)
        original_format = img.format
        old_size = os.path.getsize(input_path)
        
        # B∆∞·ªõc 2: Resize n·∫øu c√≥ y√™u c·∫ßu
        if resize_width or resize_height:
            orig_w, orig_h = img.size
            
            if resize_width and resize_height:
                # Resize theo ƒë√∫ng width & height nh·∫≠p v√†o
                new_size = (resize_width, resize_height)
            elif resize_width:
                # Resize theo width, gi·ªØ t·ª∑ l·ªá
                ratio = resize_width / orig_w
                new_size = (resize_width, int(orig_h * ratio))
            else:  # resize_height
                # Resize theo height, gi·ªØ t·ª∑ l·ªá
                ratio = resize_height / orig_h
                new_size = (int(orig_w * ratio), resize_height)
            
            img = img.resize(new_size, Image.Resampling.LANCZOS)
        
        # B∆∞·ªõc 3: X√°c ƒë·ªãnh format ƒë·∫ßu ra
        if convert_format:
            target_format = convert_format.upper()
            if target_format == "JPG":
                target_format = "JPEG"
            
            # Convert sang RGB n·∫øu c·∫ßn thi·∫øt cho JPEG
            if target_format == "JPEG" and img.mode in ("RGBA", "LA", "P"):
                # T·∫°o background tr·∫Øng
                background = Image.new("RGB", img.size, (255, 255, 255))
                if img.mode == "P":
                    img = img.convert("RGBA")
                background.paste(img, mask=img.split()[-1] if img.mode == "RGBA" else None)
                img = background
        else:
            target_format = original_format or "JPEG"
        
        # B∆∞·ªõc 4: ƒê·∫£m b·∫£o th∆∞ m·ª•c ƒë·∫ßu ra t·ªìn t·∫°i
        ensure_directory_exists(os.path.dirname(output_path))
        
        # B∆∞·ªõc 5: L∆∞u ·∫£nh v·ªõi n√©n
        save_kwargs = {
            'format': target_format,
            'optimize': optimize
        }
        
        # Th√™m quality cho c√°c format h·ªó tr·ª£
        if target_format in ['JPEG', 'WEBP']:
            save_kwargs['quality'] = quality
        
        img.save(output_path, **save_kwargs)
        
        # B∆∞·ªõc 6: N·∫øu c√≥ max_size_kb, gi·∫£m d·∫ßn quality
        if max_size_kb and target_format in ['JPEG', 'WEBP']:
            current_quality = quality
            max_size_bytes = max_size_kb * 1024
            
            while os.path.getsize(output_path) > max_size_bytes and current_quality > 10:
                current_quality -= 5
                save_kwargs['quality'] = current_quality
                img.save(output_path, **save_kwargs)
        
        new_size = os.path.getsize(output_path)
        
        # T√≠nh t·ª∑ l·ªá n√©n
        reduction = ((old_size - new_size) / old_size) * 100 if old_size > 0 else 0
        
        message = f"{format_size(old_size)} ‚Üí {format_size(new_size)} (-{reduction:.1f}%)"
        
        return True, message, old_size, new_size
        
    except Exception as e:
        return False, str(e), 0, 0


def batch_compress_images(
    input_dir: str,
    output_dir: str,
    quality: int = 70,
    optimize: bool = True,
    max_size_kb: Optional[int] = None,
    convert_format: Optional[str] = None,
    resize_width: Optional[int] = None,
    resize_height: Optional[int] = None,
    use_multiprocessing: bool = True,
    max_workers: Optional[int] = None
) -> Tuple[int, int, int, int]:
    """
    N√©n ·∫£nh h√†ng lo·∫°t
    
    Args:
        input_dir: Th∆∞ m·ª•c ch·ª©a ·∫£nh g·ªëc
        output_dir: Th∆∞ m·ª•c ƒë·∫ßu ra
        quality: Ch·∫•t l∆∞·ª£ng n√©n
        optimize: C√≥ optimize kh√¥ng
        max_size_kb: Dung l∆∞·ª£ng t·ªëi ƒëa
        convert_format: ƒê·ªãnh d·∫°ng ƒë√≠ch
        resize_width: Chi·ªÅu r·ªông m·ªõi
        resize_height: Chi·ªÅu cao m·ªõi
        use_multiprocessing: C√≥ d√πng multiprocessing kh√¥ng
        max_workers: S·ªë workers (None = auto)
    
    Returns:
        tuple: (success_count, error_count, total_old_size, total_new_size)
    
    Gi·∫£i th√≠ch:
    - Qu√©t t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c
    - X·ª≠ l√Ω song song v·ªõi multiprocessing (n·∫øu enabled)
    - Hi·ªÉn th·ªã progress bar
    - Tr·∫£ v·ªÅ th·ªëng k√™
    """
    # B∆∞·ªõc 1: L·∫•y danh s√°ch ·∫£nh
    image_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.bmp', '.gif', '.tiff']
    image_files = get_file_list(
        input_dir,
        extensions=image_extensions,
        recursive=False  # Ch·ªâ qu√©t th∆∞ m·ª•c hi·ªán t·∫°i
    )
    
    if not image_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o!")
        return 0, 0, 0, 0
    
    print(f"üì∏ T√¨m th·∫•y {len(image_files)} ·∫£nh\n")
    log_info(f"B·∫Øt ƒë·∫ßu n√©n {len(image_files)} ·∫£nh")
    
    # B∆∞·ªõc 2: T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra
    ensure_directory_exists(output_dir)
    
    # B∆∞·ªõc 3: Chu·∫©n b·ªã tasks
    tasks = []
    for img_path in image_files:
        filename = os.path.basename(img_path)
        
        # ƒê·ªïi extension n·∫øu convert format
        if convert_format:
            name_without_ext = os.path.splitext(filename)[0]
            ext = convert_format.lower()
            if ext == "jpeg":
                ext = "jpg"
            filename = f"{name_without_ext}.{ext}"
        
        output_path = os.path.join(output_dir, filename)
        
        tasks.append({
            'input_path': img_path,
            'output_path': output_path,
            'quality': quality,
            'optimize': optimize,
            'max_size_kb': max_size_kb,
            'convert_format': convert_format,
            'resize_width': resize_width,
            'resize_height': resize_height
        })
    
    # B∆∞·ªõc 4: X·ª≠ l√Ω ·∫£nh
    success_count = 0
    error_count = 0
    total_old_size = 0
    total_new_size = 0
    
    progress = ProgressBar(len(tasks), prefix="ƒêang x·ª≠ l√Ω:")
    
    if use_multiprocessing and len(tasks) > 1:
        # X·ª≠ l√Ω song song v·ªõi multiprocessing
        import multiprocessing
        if max_workers is None:
            max_workers = min(multiprocessing.cpu_count(), len(tasks))
        
        with ProcessPoolExecutor(max_workers=max_workers) as executor:
            futures = {
                executor.submit(
                    compress_single_image,
                    task['input_path'],
                    task['output_path'],
                    task['quality'],
                    task['optimize'],
                    task['max_size_kb'],
                    task['convert_format'],
                    task['resize_width'],
                    task['resize_height']
                ): task for task in tasks
            }
            
            for future in as_completed(futures):
                task = futures[future]
                filename = os.path.basename(task['input_path'])
                
                try:
                    success, message, old_size, new_size = future.result()
                    
                    if success:
                        success_count += 1
                        total_old_size += old_size
                        total_new_size += new_size
                        progress.update(message=f"‚úÖ {filename}")
                        log_info(f"N√©n th√†nh c√¥ng: {filename} - {message}")
                    else:
                        error_count += 1
                        progress.update(message=f"‚ùå {filename}: {message}")
                        log_error(f"L·ªói n√©n {filename}: {message}")
                
                except Exception as e:
                    error_count += 1
                    progress.update(message=f"‚ùå {filename}: {str(e)}")
                    log_error(f"Exception khi n√©n {filename}: {str(e)}")
    else:
        # X·ª≠ l√Ω tu·∫ßn t·ª±
        for task in tasks:
            filename = os.path.basename(task['input_path'])
            
            success, message, old_size, new_size = compress_single_image(
                task['input_path'],
                task['output_path'],
                task['quality'],
                task['optimize'],
                task['max_size_kb'],
                task['convert_format'],
                task['resize_width'],
                task['resize_height']
            )
            
            if success:
                success_count += 1
                total_old_size += old_size
                total_new_size += new_size
                progress.update(message=f"‚úÖ {filename}")
                log_info(f"N√©n th√†nh c√¥ng: {filename} - {message}")
            else:
                error_count += 1
                progress.update(message=f"‚ùå {filename}: {message}")
                log_error(f"L·ªói n√©n {filename}: {message}")
    
    progress.finish()
    
    return success_count, error_count, total_old_size, total_new_size


def main_interactive():
    """
    Ch·∫ø ƒë·ªô interactive (menu nh·∫≠p li·ªáu)
    
    Gi·∫£i th√≠ch:
    - H·ªèi ng∆∞·ªùi d√πng t·ª´ng th√¥ng s·ªë
    - Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
    """
    print_header("TOOL N√âN V√Ä CH·ªàNH S·ª¨A ·∫¢NH")
    
    # Nh·∫≠p th∆∞ m·ª•c input
    print("üí° M·∫πo: B·∫°n c√≥ th·ªÉ k√©o th·∫£ th∆∞ m·ª•c v√†o terminal ƒë·ªÉ nh·∫≠p ƒë∆∞·ªùng d·∫´n")
    input_dir_raw = get_user_input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a ·∫£nh")
    input_dir = normalize_path(input_dir_raw)
    
    if not os.path.isdir(input_dir):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {input_dir}")
        return
    
    print(f"‚úÖ ƒê√£ ch·ªçn: {input_dir}\n")
    
    # Nh·∫≠p th∆∞ m·ª•c output
    default_output = os.path.join(
        input_dir,
        f"compressed_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"
    )
    output_dir_raw = get_user_input(
        "Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë·∫ßu ra (Enter ƒë·ªÉ m·∫∑c ƒë·ªãnh)",
        default=default_output
    )
    output_dir = normalize_path(output_dir_raw)
    
    # Quality
    quality_input = get_user_input("Nh·∫≠p quality (1-100, m·∫∑c ƒë·ªãnh 70)", default="70")
    try:
        quality = int(quality_input)
        quality = max(1, min(100, quality))
    except ValueError:
        quality = 70
    
    # Optimize
    optimize_input = get_user_input("C√≥ b·∫≠t optimize kh√¥ng? (Y/n, m·∫∑c ƒë·ªãnh Yes)", default="y")
    optimize = optimize_input.lower() != "n"
    
    # Convert format
    convert_format = get_user_input(
        "Mu·ªën ƒë·ªïi sang ƒë·ªãnh d·∫°ng n√†o? (jpg, png, webp - Enter ƒë·ªÉ gi·ªØ nguy√™n)",
        default=None
    )
    if convert_format and convert_format.lower() not in ['jpg', 'jpeg', 'png', 'webp', 'bmp']:
        print("‚ö†Ô∏è  Format kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n format g·ªëc")
        convert_format = None
    
    # Max size
    max_size_input = get_user_input("Nh·∫≠p dung l∆∞·ª£ng t·ªëi ƒëa m·ªói ·∫£nh (KB, Enter ƒë·ªÉ b·ªè qua)", default=None)
    max_size_kb = int(max_size_input) if max_size_input and max_size_input.isdigit() else None
    
    # Resize
    resize_w_input = get_user_input("Nh·∫≠p chi·ªÅu r·ªông (px, Enter ƒë·ªÉ b·ªè qua)", default=None)
    resize_width = int(resize_w_input) if resize_w_input and resize_w_input.isdigit() else None
    
    resize_h_input = get_user_input("Nh·∫≠p chi·ªÅu cao (px, Enter ƒë·ªÉ b·ªè qua)", default=None)
    resize_height = int(resize_h_input) if resize_h_input and resize_h_input.isdigit() else None
    
    # Multiprocessing
    use_mp = get_user_input("S·ª≠ d·ª•ng multiprocessing? (Y/n, m·∫∑c ƒë·ªãnh Yes)", default="y")
    use_multiprocessing = use_mp.lower() != "n"
    
    # X√°c nh·∫≠n
    print("\n===== X√ÅC NH·∫¨N C·∫§U H√åNH =====")
    print(f"üìÅ Th∆∞ m·ª•c ƒë·∫ßu v√†o: {input_dir}")
    print(f"üìÅ Th∆∞ m·ª•c ƒë·∫ßu ra: {output_dir}")
    print(f"üé® Quality: {quality}")
    print(f"‚ö° Optimize: {'C√≥' if optimize else 'Kh√¥ng'}")
    if convert_format:
        print(f"üîÑ Format: {convert_format.upper()}")
    if max_size_kb:
        print(f"üìä Dung l∆∞·ª£ng t·ªëi ƒëa: {max_size_kb} KB")
    if resize_width or resize_height:
        print(f"üìè Resize: {resize_width or 'auto'}x{resize_height or 'auto'} px")
    print(f"‚ö° Multiprocessing: {'C√≥' if use_multiprocessing else 'Kh√¥ng'}")
    
    if not confirm_action("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω?"):
        print("‚ùå ƒê√£ h·ªßy")
        return
    
    # X·ª≠ l√Ω
    print(f"\nüöÄ B·∫Øt ƒë·∫ßu n√©n ·∫£nh...\n")
    
    success, errors, old_size, new_size = batch_compress_images(
        input_dir, output_dir, quality, optimize, max_size_kb,
        convert_format, resize_width, resize_height, use_multiprocessing
    )
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"\n{'='*60}")
    print(f"‚úÖ Ho√†n th√†nh!")
    print(f"   - Th√†nh c√¥ng: {success} ·∫£nh")
    print(f"   - L·ªói: {errors} ·∫£nh")
    print(f"   - Dung l∆∞·ª£ng g·ªëc: {format_size(old_size)}")
    print(f"   - Dung l∆∞·ª£ng m·ªõi: {format_size(new_size)}")
    if old_size > 0:
        reduction = ((old_size - new_size) / old_size) * 100
        print(f"   - Ti·∫øt ki·ªám: {format_size(old_size - new_size)} ({reduction:.1f}%)")
    print(f"   - Th∆∞ m·ª•c: {output_dir}")
    print(f"{'='*60}")
    
    log_info(f"Ho√†n th√†nh n√©n: {success} th√†nh c√¥ng, {errors} l·ªói")


def main_cli(args):
    """
    Ch·∫ø ƒë·ªô CLI (command line arguments)
    
    Args:
        args: Arguments t·ª´ argparse
    
    Gi·∫£i th√≠ch:
    - Ch·∫°y tool b·∫±ng command line
    - H·ªØu √≠ch cho scripting v√† automation
    """
    # Validate input
    if not os.path.isdir(args.input):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {args.input}")
        return 1
    
    # X·ª≠ l√Ω
    success, errors, old_size, new_size = batch_compress_images(
        args.input,
        args.output,
        args.quality,
        args.optimize,
        args.max_size,
        args.format,
        args.width,
        args.height,
        not args.no_multiprocessing
    )
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ng·∫Øn g·ªçn
    print(f"\n‚úÖ {success} th√†nh c√¥ng, ‚ùå {errors} l·ªói")
    if old_size > 0:
        reduction = ((old_size - new_size) / old_size) * 100
        print(f"üíæ Ti·∫øt ki·ªám: {format_size(old_size - new_size)} ({reduction:.1f}%)")
    
    return 0 if errors == 0 else 1


def main():
    """
    H√†m main - ƒëi·ªÅu ph·ªëi gi·ªØa interactive v√† CLI mode
    
    Gi·∫£i th√≠ch:
    - N·∫øu c√≥ arguments -> CLI mode
    - N·∫øu kh√¥ng -> Interactive mode
    """
    # Setup logger
    setup_logger('compress-images', log_to_console=False)
    
    # T·∫°o argument parser
    parser = argparse.ArgumentParser(
        description='Tool n√©n v√† ch·ªânh s·ª≠a ·∫£nh h√†ng lo·∫°t',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª•:
  # Ch·∫ø ƒë·ªô interactive
  python compress-images.py
  
  # N√©n v·ªõi quality 80
  python compress-images.py -i ./images -o ./output -q 80
  
  # Resize v√† convert sang WebP
  python compress-images.py -i ./images -o ./output -f webp -w 1920
  
  # Gi·ªõi h·∫°n dung l∆∞·ª£ng t·ªëi ƒëa 500KB
  python compress-images.py -i ./images -o ./output --max-size 500
        """
    )
    
    parser.add_argument('-i', '--input', help='Th∆∞ m·ª•c ch·ª©a ·∫£nh ƒë·∫ßu v√†o')
    parser.add_argument('-o', '--output', help='Th∆∞ m·ª•c ƒë·∫ßu ra')
    parser.add_argument('-q', '--quality', type=int, default=70, 
                       help='Ch·∫•t l∆∞·ª£ng n√©n (1-100, m·∫∑c ƒë·ªãnh: 70)')
    parser.add_argument('--no-optimize', dest='optimize', action='store_false',
                       help='T·∫Øt optimization')
    parser.add_argument('-f', '--format', choices=['jpg', 'jpeg', 'png', 'webp'],
                       help='ƒê·ªïi sang ƒë·ªãnh d·∫°ng kh√°c')
    parser.add_argument('--max-size', type=int, help='Dung l∆∞·ª£ng t·ªëi ƒëa (KB)')
    parser.add_argument('-w', '--width', type=int, help='Chi·ªÅu r·ªông m·ªõi (px)')
    parser.add_argument('-H', '--height', type=int, help='Chi·ªÅu cao m·ªõi (px)')
    parser.add_argument('--no-multiprocessing', action='store_true',
                       help='T·∫Øt multiprocessing')
    
    # Parse arguments
    args, unknown = parser.parse_known_args()
    
    # N·∫øu c√≥ -i th√¨ d√πng CLI mode
    if args.input:
        if not args.output:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            args.output = os.path.join(args.input, f"compressed_{timestamp}")
        
        sys.exit(main_cli(args))
    else:
        # Interactive mode
        try:
            main_interactive()
        except KeyboardInterrupt:
            print("\n\n‚ùå ƒê√£ h·ªßy!")
        except Exception as e:
            print(f"\n‚ùå L·ªói: {e}")
            log_error(f"Exception: {e}", exc_info=True)


if __name__ == "__main__":
    main()
