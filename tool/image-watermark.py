#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tool: Th√™m watermark v√†o ·∫£nh h√†ng lo·∫°t
M·ª•c ƒë√≠ch: B·∫£o v·ªá b·∫£n quy·ªÅn ·∫£nh, th√™m logo/text branding
"""

import os
import datetime
from pathlib import Path


def print_header():
    """In header c·ªßa tool"""
    print("=" * 60)
    print("  TOOL TH√äM WATERMARK V√ÄO ·∫¢NH")
    print("=" * 60)
    print()


def check_dependencies():
    """
    Ki·ªÉm tra th∆∞ vi·ªán Pillow
    
    M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o user ƒë√£ c√†i Pillow
    L√Ω do: Pillow c·∫ßn thi·∫øt cho x·ª≠ l√Ω ·∫£nh
    """
    try:
        from PIL import Image
        return True
    except ImportError:
        print("‚ùå Thi·∫øu th∆∞ vi·ªán Pillow!")
        print("C√†i ƒë·∫∑t: pip install Pillow")
        return False


def format_size(size_bytes):
    """Format dung l∆∞·ª£ng d·ªÖ ƒë·ªçc"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024.0


def get_position_coordinates(image_width, image_height, watermark_width, watermark_height, position, margin=10):
    """
    T√≠nh to√°n t·ªça ƒë·ªô watermark theo v·ªã tr√≠
    
    Args:
        image_width, image_height: K√≠ch th∆∞·ªõc ·∫£nh g·ªëc
        watermark_width, watermark_height: K√≠ch th∆∞·ªõc watermark
        position: V·ªã tr√≠ (top-left, top-center, top-right, middle-left, center, 
                  middle-right, bottom-left, bottom-center, bottom-right)
        margin: Kho·∫£ng c√°ch t·ª´ m√©p (pixels)
    
    Returns:
        tuple: (x, y) t·ªça ƒë·ªô ƒë·ªÉ ƒë·∫∑t watermark
    
    Gi·∫£i th√≠ch:
    - H·ªó tr·ª£ 9 v·ªã tr√≠ ph·ªï bi·∫øn
    - Margin ƒë·ªÉ watermark kh√¥ng s√°t m√©p
    """
    positions = {
        'top-left': (margin, margin),
        'top-center': ((image_width - watermark_width) // 2, margin),
        'top-right': (image_width - watermark_width - margin, margin),
        
        'middle-left': (margin, (image_height - watermark_height) // 2),
        'center': ((image_width - watermark_width) // 2, (image_height - watermark_height) // 2),
        'middle-right': (image_width - watermark_width - margin, (image_height - watermark_height) // 2),
        
        'bottom-left': (margin, image_height - watermark_height - margin),
        'bottom-center': ((image_width - watermark_width) // 2, image_height - watermark_height - margin),
        'bottom-right': (image_width - watermark_width - margin, image_height - watermark_height - margin),
    }
    
    return positions.get(position, positions['bottom-right'])


def add_text_watermark(image_path, output_path, text, position='bottom-right', 
                       opacity=128, font_size=36, color=(255, 255, 255), margin=10):
    """
    Th√™m text watermark v√†o ·∫£nh
    
    Args:
        image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh g·ªëc
        output_path: ƒê∆∞·ªùng d·∫´n ·∫£nh output
        text: Text watermark
        position: V·ªã tr√≠ ƒë·∫∑t watermark
        opacity: ƒê·ªô trong su·ªët (0-255, 0=trong su·ªët ho√†n to√†n, 255=kh√¥ng trong su·ªët)
        font_size: K√≠ch th∆∞·ªõc ch·ªØ
        color: M√†u ch·ªØ RGB (255, 255, 255) = tr·∫Øng
        margin: Kho·∫£ng c√°ch t·ª´ m√©p
    
    Gi·∫£i th√≠ch:
    - T·∫°o layer trong su·ªët cho watermark
    - V·∫Ω text l√™n layer
    - Composite layer v·ªõi ·∫£nh g·ªëc
    - Opacity ƒëi·ªÅu khi·ªÉn ƒë·ªô m·ªù/ƒë·∫≠m c·ªßa watermark
    """
    from PIL import Image, ImageDraw, ImageFont
    
    try:
        # M·ªü ·∫£nh g·ªëc
        image = Image.open(image_path).convert('RGBA')
        
        # T·∫°o layer trong su·ªët cho watermark
        watermark_layer = Image.new('RGBA', image.size, (0, 0, 0, 0))
        draw = ImageDraw.Draw(watermark_layer)
        
        # Load font
        try:
            # Try to use TrueType font
            font = ImageFont.truetype("arial.ttf", font_size)
        except:
            try:
                # Try alternative font
                font = ImageFont.truetype("Arial.ttf", font_size)
            except:
                # Fallback to default font
                font = ImageFont.load_default()
        
        # T√≠nh k√≠ch th∆∞·ªõc text
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        # T√≠nh t·ªça ƒë·ªô ƒë·∫∑t text
        x, y = get_position_coordinates(
            image.width, image.height,
            text_width, text_height,
            position, margin
        )
        
        # V·∫Ω text v·ªõi m√†u v√† opacity
        text_color = color + (opacity,)
        draw.text((x, y), text, font=font, fill=text_color)
        
        # Composite watermark layer v·ªõi ·∫£nh g·ªëc
        watermarked = Image.alpha_composite(image, watermark_layer)
        
        # Convert v·ªÅ RGB n·∫øu c·∫ßn (ƒë·ªÉ save JPEG)
        if output_path.lower().endswith(('.jpg', '.jpeg')):
            watermarked = watermarked.convert('RGB')
        
        # Save
        watermarked.save(output_path, quality=95)
        
        return True, None
        
    except Exception as e:
        return False, str(e)


def add_image_watermark(image_path, output_path, watermark_image_path, 
                       position='bottom-right', opacity=128, scale=0.1, margin=10):
    """
    Th√™m image watermark (logo) v√†o ·∫£nh
    
    Args:
        image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh g·ªëc
        output_path: ƒê∆∞·ªùng d·∫´n ·∫£nh output
        watermark_image_path: ƒê∆∞·ªùng d·∫´n logo/watermark image
        position: V·ªã tr√≠ ƒë·∫∑t watermark
        opacity: ƒê·ªô trong su·ªët (0-255)
        scale: T·ª∑ l·ªá logo so v·ªõi ·∫£nh g·ªëc (0.1 = 10% chi·ªÅu r·ªông ·∫£nh)
        margin: Kho·∫£ng c√°ch t·ª´ m√©p
    
    Gi·∫£i th√≠ch:
    - Load logo v√† resize theo t·ª∑ l·ªá
    - ƒêi·ªÅu ch·ªânh opacity c·ªßa logo
    - ƒê·∫∑t logo v√†o v·ªã tr√≠ ch·ªâ ƒë·ªãnh
    - Composite v·ªõi ·∫£nh g·ªëc
    """
    from PIL import Image
    
    try:
        # M·ªü ·∫£nh g·ªëc v√† logo
        image = Image.open(image_path).convert('RGBA')
        logo = Image.open(watermark_image_path).convert('RGBA')
        
        # Resize logo theo t·ª∑ l·ªá
        logo_width = int(image.width * scale)
        logo_height = int(logo.height * (logo_width / logo.width))
        logo = logo.resize((logo_width, logo_height), Image.Resampling.LANCZOS)
        
        # ƒêi·ªÅu ch·ªânh opacity c·ªßa logo
        if opacity < 255:
            # T·∫°o alpha channel m·ªõi v·ªõi opacity
            alpha = logo.split()[3]
            alpha = alpha.point(lambda p: int(p * opacity / 255))
            logo.putalpha(alpha)
        
        # T·∫°o layer trong su·ªët
        watermark_layer = Image.new('RGBA', image.size, (0, 0, 0, 0))
        
        # T√≠nh t·ªça ƒë·ªô ƒë·∫∑t logo
        x, y = get_position_coordinates(
            image.width, image.height,
            logo_width, logo_height,
            position, margin
        )
        
        # Paste logo v√†o layer
        watermark_layer.paste(logo, (x, y), logo)
        
        # Composite v·ªõi ·∫£nh g·ªëc
        watermarked = Image.alpha_composite(image, watermark_layer)
        
        # Convert v·ªÅ RGB n·∫øu c·∫ßn
        if output_path.lower().endswith(('.jpg', '.jpeg')):
            watermarked = watermarked.convert('RGB')
        
        # Save
        watermarked.save(output_path, quality=95)
        
        return True, None
        
    except Exception as e:
        return False, str(e)


def batch_watermark(input_folder, output_folder, watermark_config):
    """
    Th√™m watermark h√†ng lo·∫°t
    
    Args:
        input_folder: Th∆∞ m·ª•c ch·ª©a ·∫£nh g·ªëc
        output_folder: Th∆∞ m·ª•c ch·ª©a ·∫£nh ƒë√£ watermark
        watermark_config: Dictionary config watermark
    
    Returns:
        tuple: (success_count, error_count)
    
    Gi·∫£i th√≠ch:
    - Qu√©t t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c
    - Apply watermark cho t·ª´ng ·∫£nh
    - ƒê·∫øm s·ªë ·∫£nh th√†nh c√¥ng/l·ªói
    """
    # T·∫°o th∆∞ m·ª•c output
    os.makedirs(output_folder, exist_ok=True)
    
    # C√°c ƒë·ªãnh d·∫°ng ·∫£nh h·ªó tr·ª£
    image_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.bmp']
    
    # L·∫•y danh s√°ch ·∫£nh
    image_files = [
        f for f in os.listdir(input_folder)
        if os.path.isfile(os.path.join(input_folder, f))
        and os.path.splitext(f)[1].lower() in image_extensions
    ]
    
    if not image_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o!")
        return 0, 0
    
    print(f"üì∏ T√¨m th·∫•y {len(image_files)} ·∫£nh\n")
    
    success_count = 0
    error_count = 0
    
    watermark_type = watermark_config.get('type', 'text')
    
    for idx, filename in enumerate(image_files, 1):
        input_path = os.path.join(input_folder, filename)
        output_path = os.path.join(output_folder, filename)
        
        print(f"[{idx}/{len(image_files)}] {filename}...", end=" ")
        
        try:
            if watermark_type == 'text':
                success, error = add_text_watermark(
                    input_path, output_path,
                    text=watermark_config.get('text', 'Copyright'),
                    position=watermark_config.get('position', 'bottom-right'),
                    opacity=watermark_config.get('opacity', 128),
                    font_size=watermark_config.get('font_size', 36),
                    color=watermark_config.get('color', (255, 255, 255)),
                    margin=watermark_config.get('margin', 10)
                )
            else:  # image watermark
                success, error = add_image_watermark(
                    input_path, output_path,
                    watermark_image_path=watermark_config.get('logo_path'),
                    position=watermark_config.get('position', 'bottom-right'),
                    opacity=watermark_config.get('opacity', 128),
                    scale=watermark_config.get('scale', 0.1),
                    margin=watermark_config.get('margin', 10)
                )
            
            if success:
                size = format_size(os.path.getsize(output_path))
                print(f"‚úÖ ({size})")
                success_count += 1
            else:
                print(f"‚ùå {error}")
                error_count += 1
                
        except Exception as e:
            print(f"‚ùå {e}")
            error_count += 1
    
    return success_count, error_count


def save_template(template_name, config):
    """
    L∆∞u template watermark
    
    M·ª•c ƒë√≠ch: L∆∞u c·∫•u h√¨nh ƒë·ªÉ t√°i s·ª≠ d·ª•ng
    L√Ω do: Kh√¥ng c·∫ßn nh·∫≠p l·∫°i config m·ªói l·∫ßn
    """
    import json
    
    templates_file = 'watermark_templates.json'
    
    # Load templates hi·ªán c√≥
    templates = {}
    if os.path.exists(templates_file):
        try:
            with open(templates_file, 'r', encoding='utf-8') as f:
                templates = json.load(f)
        except:
            templates = {}
    
    # Th√™m template m·ªõi
    templates[template_name] = config
    
    # Save
    with open(templates_file, 'w', encoding='utf-8') as f:
        json.dump(templates, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ ƒê√£ l∆∞u template: {template_name}")


def load_templates():
    """Load t·∫•t c·∫£ templates ƒë√£ l∆∞u"""
    import json
    
    templates_file = 'watermark_templates.json'
    
    if not os.path.exists(templates_file):
        return {}
    
    try:
        with open(templates_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}


def list_templates():
    """Hi·ªÉn th·ªã danh s√°ch templates"""
    templates = load_templates()
    
    if not templates:
        print("Ch∆∞a c√≥ template n√†o ƒë∆∞·ª£c l∆∞u.")
        return None
    
    print("\n===== TEMPLATES ƒê√É L∆ØU =====")
    template_list = list(templates.keys())
    
    for idx, name in enumerate(template_list, 1):
        config = templates[name]
        print(f"{idx}. {name}")
        print(f"   Type: {config.get('type', 'text')}")
        if config.get('type') == 'text':
            print(f"   Text: {config.get('text', '')}")
        print(f"   Position: {config.get('position', 'bottom-right')}")
        print(f"   Opacity: {config.get('opacity', 128)}")
        print()
    
    choice = input("Ch·ªçn template (Enter ƒë·ªÉ b·ªè qua): ").strip()
    
    if choice.isdigit() and 1 <= int(choice) <= len(template_list):
        template_name = template_list[int(choice) - 1]
        return templates[template_name]
    
    return None


def main():
    """
    H√†m ch√≠nh - Menu watermark tool
    
    Gi·∫£i th√≠ch:
    - Hi·ªÉn th·ªã menu c√°c ch·ª©c nƒÉng
    - Cho ph√©p ch·ªçn text ho·∫∑c image watermark
    - Config chi ti·∫øt (position, opacity, size...)
    - H·ªó tr·ª£ template ƒë·ªÉ t√°i s·ª≠ d·ª•ng
    """
    print_header()
    
    # Ki·ªÉm tra dependencies
    if not check_dependencies():
        return
    
    print("===== CH·∫æ ƒê·ªò =====")
    print("1. Text Watermark (ch·ªØ)")
    print("2. Image Watermark (logo)")
    print("3. D√πng Template ƒë√£ l∆∞u")
    print("0. Tho√°t")
    
    mode = input("\nCh·ªçn ch·∫ø ƒë·ªô (0-3): ").strip()
    
    if mode == "0":
        print("Tho√°t ch∆∞∆°ng tr√¨nh.")
        return
    
    watermark_config = {}
    
    if mode == "3":
        # Load template
        config = list_templates()
        if not config:
            print("\n‚ùå Kh√¥ng c√≥ template n√†o. T·∫°o m·ªõi:")
            mode = input("Ch·ªçn ch·∫ø ƒë·ªô (1=Text, 2=Image): ").strip()
        else:
            watermark_config = config
            mode = None  # Skip config input
    
    # Config watermark
    if mode == "1":
        # Text watermark
        print("\n===== THI·∫æT L·∫¨P TEXT WATERMARK =====")
        
        text = input("Nh·∫≠p text watermark (vd: ¬© 2024 Your Name): ").strip()
        if not text:
            text = "¬© 2024"
        
        watermark_config['type'] = 'text'
        watermark_config['text'] = text
        
    elif mode == "2":
        # Image watermark
        print("\n===== THI·∫æT L·∫¨P IMAGE WATERMARK =====")
        
        logo_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n logo/watermark (PNG trong su·ªët): ").strip('"')
        if not os.path.isfile(logo_path):
            print("‚ùå File logo kh√¥ng t·ªìn t·∫°i!")
            return
        
        watermark_config['type'] = 'image'
        watermark_config['logo_path'] = logo_path
        
        scale_input = input("K√≠ch th∆∞·ªõc logo (% chi·ªÅu r·ªông ·∫£nh, m·∫∑c ƒë·ªãnh 10): ").strip()
        scale = float(scale_input) / 100 if scale_input else 0.1
        watermark_config['scale'] = scale
    
    # Config chung (n·∫øu ch∆∞a c√≥ trong template)
    if 'position' not in watermark_config:
        print("\n===== V·ªä TR√ç WATERMARK =====")
        print("1. Top Left       2. Top Center       3. Top Right")
        print("4. Middle Left    5. Center           6. Middle Right")
        print("7. Bottom Left    8. Bottom Center    9. Bottom Right")
        
        pos_choice = input("\nCh·ªçn v·ªã tr√≠ (1-9, m·∫∑c ƒë·ªãnh 9): ").strip()
        
        positions = {
            '1': 'top-left', '2': 'top-center', '3': 'top-right',
            '4': 'middle-left', '5': 'center', '6': 'middle-right',
            '7': 'bottom-left', '8': 'bottom-center', '9': 'bottom-right'
        }
        
        position = positions.get(pos_choice, 'bottom-right')
        watermark_config['position'] = position
    
    if 'opacity' not in watermark_config:
        opacity_input = input("\nƒê·ªô trong su·ªët (0-255, 0=trong su·ªët, 255=ƒë·∫∑c, m·∫∑c ƒë·ªãnh 128): ").strip()
        opacity = int(opacity_input) if opacity_input.isdigit() else 128
        opacity = max(0, min(255, opacity))
        watermark_config['opacity'] = opacity
    
    if watermark_config.get('type') == 'text' and 'font_size' not in watermark_config:
        font_input = input("K√≠ch th∆∞·ªõc ch·ªØ (pixels, m·∫∑c ƒë·ªãnh 36): ").strip()
        font_size = int(font_input) if font_input.isdigit() else 36
        watermark_config['font_size'] = font_size
        
        color_input = input("M√†u ch·ªØ (white/black, m·∫∑c ƒë·ªãnh white): ").strip().lower()
        color = (0, 0, 0) if color_input == 'black' else (255, 255, 255)
        watermark_config['color'] = color
    
    if 'margin' not in watermark_config:
        watermark_config['margin'] = 10
    
    # Input/Output folders
    print("\n===== TH∆Ø M·ª§C ·∫¢NH =====")
    input_folder = input("Th∆∞ m·ª•c ch·ª©a ·∫£nh g·ªëc: ").strip('"')
    if not os.path.isdir(input_folder):
        print("‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!")
        return
    
    output_folder = input("Th∆∞ m·ª•c output (Enter ƒë·ªÉ t·∫°o 'watermarked' v·ªõi timestamp): ").strip('"')
    if not output_folder:
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        output_folder = os.path.join(input_folder, f"watermarked_{timestamp}")
    
    # Preview config
    print("\n===== X√ÅC NH·∫¨N CONFIG =====")
    print(f"Type: {watermark_config['type']}")
    if watermark_config['type'] == 'text':
        print(f"Text: {watermark_config['text']}")
        print(f"Font size: {watermark_config['font_size']}")
    else:
        print(f"Logo: {os.path.basename(watermark_config['logo_path'])}")
        print(f"Scale: {watermark_config['scale'] * 100:.0f}%")
    print(f"Position: {watermark_config['position']}")
    print(f"Opacity: {watermark_config['opacity']}")
    
    confirm = input("\nB·∫Øt ƒë·∫ßu x·ª≠ l√Ω? (Y/n): ").strip().lower()
    if confirm == 'n':
        print("‚ùå ƒê√£ h·ªßy.")
        return
    
    # Save template option
    save_tpl = input("\nL∆∞u config th√†nh template? (y/N): ").strip().lower()
    if save_tpl == 'y':
        tpl_name = input("Nh·∫≠p t√™n template: ").strip()
        if tpl_name:
            save_template(tpl_name, watermark_config)
    
    # Process
    print(f"\nüöÄ B·∫Øt ƒë·∫ßu th√™m watermark...\n")
    
    success, errors = batch_watermark(input_folder, output_folder, watermark_config)
    
    # Summary
    print(f"\n{'='*60}")
    print(f"‚úÖ Ho√†n th√†nh!")
    print(f"   - Th√†nh c√¥ng: {success} ·∫£nh")
    print(f"   - L·ªói: {errors} ·∫£nh")
    print(f"   - Th∆∞ m·ª•c output: {output_folder}")
    print(f"{'='*60}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå ƒê√£ h·ªßy!")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")

