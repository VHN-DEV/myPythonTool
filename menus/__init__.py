#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Menu ch√≠nh - Giao di·ªán qu·∫£n l√Ω v√† ch·∫°y c√°c tools

M·ª•c ƒë√≠ch: Entry point cho menu system
L√Ω do: D·ªÖ d√†ng truy c·∫≠p v√† qu·∫£n l√Ω tools
"""

import os
import sys

# Fix Windows console encoding - Improved
if sys.platform == 'win32':
    try:
        # Thi·∫øt l·∫≠p UTF-8 cho console output
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
        sys.stderr.reconfigure(encoding='utf-8', errors='replace')
        
        # Thi·∫øt l·∫≠p UTF-8 cho console input (quan tr·ªçng cho EOFError)
        sys.stdin.reconfigure(encoding='utf-8', errors='replace')
    except Exception:
        # Fallback: s·ª≠ d·ª•ng wrapper
        import io
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
        sys.stdin = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8', errors='replace')

# Import ToolManager t·ª´ module ri√™ng
from .tool_manager import ToolManager
from utils.colors import Colors
from utils.format import print_separator
from utils.helpers import print_welcome_tip, print_command_suggestions, suggest_command


def safe_print(text, fallback_text=None):
    """
    In text an to√†n v·ªõi fallback cho encoding errors
    
    Args:
        text: Text c·∫ßn in (c√≥ th·ªÉ ch·ª©a emoji/unicode)
        fallback_text: Text d·ª± ph√≤ng n·∫øu kh√¥ng in ƒë∆∞·ª£c (ASCII)
    
    Gi·∫£i th√≠ch:
    - C·ªë g·∫Øng in text g·ªëc v·ªõi emoji
    - N·∫øu l·ªói encoding, d√πng fallback
    - N·∫øu kh√¥ng c√≥ fallback, b·ªè qua emoji
    """
    try:
        print(text)
    except UnicodeEncodeError:
        if fallback_text:
            print(fallback_text)
        else:
            # Lo·∫°i b·ªè emoji v√† in l·∫°i
            import re
            ascii_text = re.sub(r'[^\x00-\x7F]+', '', text)
            print(ascii_text)


def _run_tool_loop(manager, tool, tools):
    """
    Ch·∫°y tool v·ªõi v√≤ng l·∫∑p ri√™ng - t·ª± ƒë·ªông quay l·∫°i ƒë·∫ßu tool khi k·∫øt th√∫c
    
    Args:
        manager: ToolManager instance
        tool: T√™n tool c·∫ßn ch·∫°y
        tools: Danh s√°ch tools ƒë·ªÉ hi·ªÉn th·ªã menu khi tho√°t
    
    Gi·∫£i th√≠ch:
    - B∆∞·ªõc 1: Ch·∫°y tool l·∫ßn ƒë·∫ßu
    - B∆∞·ªõc 2: Ki·ªÉm tra exit code t·ª´ tool
    - B∆∞·ªõc 3: N·∫øu exit code l√† 130 (KeyboardInterrupt), quay v·ªÅ menu ch√≠nh
    - B∆∞·ªõc 4: N·∫øu exit code l√† 0 (th√†nh c√¥ng), t·ª± ƒë·ªông ch·∫°y l·∫°i tool ƒë√≥
    - B∆∞·ªõc 5: N·∫øu c√≥ l·ªói kh√°c, quay v·ªÅ menu ch√≠nh
    
    L√Ω do:
    - Gi√∫p ng∆∞·ªùi d√πng ti·∫øp t·ª•c l√†m vi·ªác v·ªõi c√πng m·ªôt tool m√† kh√¥ng c·∫ßn quay v·ªÅ menu ch√≠nh
    - Ti·∫øt ki·ªám th·ªùi gian v√† thao t√°c
    - Cho ph√©p ng∆∞·ªùi d√πng nh·∫•n Ctrl+C ƒë·ªÉ quay v·ªÅ menu ch√≠nh
    """
    # V√≤ng l·∫∑p cho tool - t·ª± ƒë·ªông ch·∫°y l·∫°i khi k·∫øt th√∫c
    while True:
        try:
            # Ch·∫°y tool v√† l·∫•y exit code
            exit_code = manager.run_tool(tool)
            
            # Ki·ªÉm tra exit code
            # 130 l√† exit code khi ng∆∞·ªùi d√πng nh·∫•n Ctrl+C (KeyboardInterrupt)
            if exit_code == 130:
                # Ng∆∞·ªùi d√πng nh·∫•n Ctrl+C trong tool - quay v·ªÅ menu ch√≠nh
                print()
                print(Colors.info("üîÑ Quay l·∫°i menu ch√≠nh..."))
                print()
                manager.display_menu(tools)
                break
            
            # Exit code 0 (th√†nh c√¥ng) ho·∫∑c code kh√°c - t·ª± ƒë·ªông ch·∫°y l·∫°i tool
            # Kh√¥ng c·∫ßn hi·ªÉn th·ªã menu ch√≠nh, ch·ªâ ch·∫°y l·∫°i tool
            continue
            
        except KeyboardInterrupt:
            # Ng∆∞·ªùi d√πng nh·∫•n Ctrl+C trong v√≤ng l·∫∑p tool (ngo√†i tool)
            # Quay v·ªÅ menu ch√≠nh
            print()
            print(Colors.info("üîÑ Quay l·∫°i menu ch√≠nh..."))
            print()
            manager.display_menu(tools)
            break
        
        except Exception as e:
            # X·ª≠ l√Ω l·ªói kh√°c
            try:
                print()
                print(Colors.error(f"‚ùå L·ªói khi ch·∫°y tool: {e}"))
                print(Colors.info("üîÑ Quay l·∫°i menu ch√≠nh..."))
                print()
                manager.display_menu(tools)
            except Exception:
                print(f"\nLoi: {str(e)}")
            break


def main():
    """
    H√†m main - Menu ch√≠nh
    
    Gi·∫£i th√≠ch:
    - V√≤ng l·∫∑p ch√≠nh c·ªßa menu
    - X·ª≠ l√Ω input t·ª´ ng∆∞·ªùi d√πng
    - Dispatch ƒë·∫øn c√°c ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng
    """
    # Kh·ªüi t·∫°o ToolManager
    # __file__ l√† menus/__init__.py, c·∫ßn l√πi 1 c·∫•p l√™n project root
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    tool_dir = os.path.join(project_root, "tools")
    manager = ToolManager(tool_dir)
    
    # L·∫•y danh s√°ch tools
    tools = manager.get_tool_list()
    
    if not tools:
        print(Colors.error("‚ùå Kh√¥ng t√¨m th·∫•y tool n√†o trong th∆∞ m·ª•c tools/"))
        return
    
    # Hi·ªÉn th·ªã banner ƒë·∫πp h∆°n
    print()
    
    # Logo/Title
    title_line1 = Colors.primary("  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    title_line2 = Colors.primary("  ‚ïë") + Colors.bold(Colors.info("                  MY PYTHON TOOLS")) + Colors.primary("                      ‚ïë")
    title_line3 = Colors.primary("  ‚ïë") + Colors.secondary("              B·ªô c√¥ng c·ª• Python ti·ªán √≠ch") + Colors.primary("               ‚ïë")
    title_line4 = Colors.primary("  ‚ïë") + " " * 55 + Colors.primary("‚ïë")
    title_line5 = Colors.primary("  ‚ïë") + Colors.muted("         Nh·∫≠p 'h' ho·∫∑c 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n") + Colors.primary("         ‚ïë")
    title_line6 = Colors.primary("  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    
    print(title_line1)
    print(title_line2)
    print(title_line3)
    print(title_line4)
    print(title_line5)
    print(title_line6)
    
    print()
    
    # Welcome tip
    print_welcome_tip()
    print()
    
    # Hi·ªÉn th·ªã menu l·∫ßn ƒë·∫ßu
    manager.display_menu(tools)
    
    # V√≤ng l·∫∑p ch√≠nh
    while True:
        try:
            # Nh·∫≠n input v·ªõi prompt ƒë·∫πp h∆°n
            prompt = Colors.primary(">>> ") + Colors.secondary("Ch·ªçn tool") + Colors.muted(" (h=help, q=quit): ")
            user_input = input(prompt).strip()
            
            if not user_input:
                continue
            
            # Parse command
            parts = user_input.split(maxsplit=1)
            command = parts[0].lower()
            args = parts[1] if len(parts) > 1 else ""
            
            # X·ª≠ l√Ω command
            
            # Tho√°t
            if command in ['q', 'quit', '0', 'exit']:
                print(Colors.info("üëã T·∫°m bi·ªát!"))
                break
            
            # Help
            elif command in ['h', 'help', '?']:
                manager.show_help()
            
            # List
            elif command in ['l', 'list']:
                manager.display_menu(tools)
            
            # Clear
            elif command == 'clear':
                os.system('cls' if os.name == 'nt' else 'clear')
                manager.display_menu(tools)
            
            # Search
            elif command in ['s', 'search'] or command.startswith('/'):
                if command.startswith('/'):
                    query = command[1:] + (" " + args if args else "")
                else:
                    query = args
                
                if not query:
                    print(Colors.warning("‚ö†Ô∏è  Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm"))
                    continue
                
                results = manager.search_tools(query)
                
                if results:
                    count_msg = Colors.success(f"{len(results)}")
                    query_msg = Colors.secondary(f"'{query}'")
                    print()
                    print(Colors.info(f"üîç T√¨m th·∫•y {count_msg} tool ph√π h·ª£p v·ªõi {query_msg}:"))
                    manager.display_menu(results, title=f"K·∫æT QU·∫¢ T√åM KI·∫æM: {query}", group_by_category=False, search_query=query)
                else:
                    print(Colors.error(f"‚ùå Kh√¥ng t√¨m th·∫•y tool n√†o ph√π h·ª£p v·ªõi '{query}'"))
                    # G·ª£i √Ω c√°c tools g·∫ßn ƒë√∫ng
                    all_tools = manager.get_tool_list()
                    suggestions = suggest_command(query, [manager.get_tool_display_name(t) for t in all_tools][:10])
                    if suggestions:
                        print()
                        print(Colors.info(f"üí° G·ª£i √Ω t√¨m ki·∫øm: {', '.join([Colors.secondary(s) for s in suggestions[:3]])}"))
            
            # Favorites
            elif command == 'f':
                favorites = manager.config['favorites']
                if favorites:
                    valid_favorites = [f for f in favorites if f in tools]
                    manager.display_menu(valid_favorites, title="FAVORITES")
                else:
                    print(Colors.warning("‚≠ê Ch∆∞a c√≥ favorites n√†o"))
            
            elif command.startswith('f+'):
                # Th√™m v√†o favorites
                try:
                    idx = int(args or command[2:])
                    if 1 <= idx <= len(tools):
                        tool = tools[idx - 1]
                        manager.add_to_favorites(tool)
                    else:
                        print(Colors.error("‚ùå S·ªë kh√¥ng h·ª£p l·ªá"))
                except ValueError:
                    print(Colors.error("‚ùå S·ªë kh√¥ng h·ª£p l·ªá"))
            
            elif command.startswith('f-'):
                # X√≥a kh·ªèi favorites
                try:
                    idx = int(args or command[2:])
                    if 1 <= idx <= len(tools):
                        tool = tools[idx - 1]
                        manager.remove_from_favorites(tool)
                    else:
                        print(Colors.error("‚ùå S·ªë kh√¥ng h·ª£p l·ªá"))
                except ValueError:
                    print(Colors.error("‚ùå S·ªë kh√¥ng h·ª£p l·ªá"))
            
            # Recent
            elif command == 'r':
                recent = manager.config['recent']
                if recent:
                    # L·ªçc ch·ªâ nh·ªØng tool c√≤n t·ªìn t·∫°i
                    valid_recent = [r for r in recent if r in tools]
                    manager.display_menu(valid_recent, title="RECENT TOOLS")
                else:
                    print(Colors.warning("üìö Ch∆∞a c√≥ recent tools"))
            
            elif command.startswith('r') and len(command) > 1:
                # Ch·∫°y recent tool
                try:
                    idx = int(command[1:])
                    recent = manager.config['recent']
                    
                    if 1 <= idx <= len(recent):
                        tool = recent[idx - 1]
                        if tool in tools:
                            # Ch·∫°y tool v·ªõi v√≤ng l·∫∑p ri√™ng - quay l·∫°i ƒë·∫ßu tool khi k·∫øt th√∫c
                            _run_tool_loop(manager, tool, tools)
                        else:
                            print(Colors.error(f"‚ùå Tool kh√¥ng t·ªìn t·∫°i: {tool}"))
                    else:
                        print(Colors.error("‚ùå S·ªë kh√¥ng h·ª£p l·ªá"))
                except ValueError:
                    print(Colors.error("‚ùå S·ªë kh√¥ng h·ª£p l·ªá"))
            
            # Settings
            elif command == 'set':
                print()
                print_separator("‚îÄ", 70, Colors.INFO)
                print(Colors.bold("‚öôÔ∏è  SETTINGS:"))
                for key, value in manager.config['settings'].items():
                    key_colored = Colors.info(key)
                    value_colored = Colors.secondary(str(value))
                    print(f"   {key_colored}: {value_colored}")
                print_separator("‚îÄ", 70, Colors.INFO)
                print()
            
            # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n tool (pattern: s·ªë+h, v√≠ d·ª•: 1h, 4h)
            elif command.endswith('h') and len(command) > 1 and command[:-1].isdigit():
                try:
                    # L·∫•y s·ªë t·ª´ ƒë·∫ßu command (b·ªè 'h' ·ªü cu·ªëi)
                    idx = int(command[:-1])
                    
                    if 1 <= idx <= len(tools):
                        tool = tools[idx - 1]
                        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n c·ªßa tool
                        manager.show_tool_help(tool)
                    else:
                        print(Colors.error("‚ùå S·ªë kh√¥ng h·ª£p l·ªá"))
                except ValueError:
                    # Kh√¥ng ph·∫£i pattern s·ªë+h, x·ª≠ l√Ω nh∆∞ l·ªánh kh√°c
                    print(Colors.error(f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: {command}"))
                    print(Colors.info("üí° Nh·∫≠p 'h' ho·∫∑c 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n"))
            
            # Ch·∫°y tool theo s·ªë
            elif command.isdigit():
                idx = int(command)
                
                if 1 <= idx <= len(tools):
                    tool = tools[idx - 1]
                    # Ch·∫°y tool v·ªõi v√≤ng l·∫∑p ri√™ng - quay l·∫°i ƒë·∫ßu tool khi k·∫øt th√∫c
                    _run_tool_loop(manager, tool, tools)
                else:
                    print(Colors.error("‚ùå S·ªë kh√¥ng h·ª£p l·ªá"))
            
            else:
                print(Colors.error(f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: {command}"))
                
                # G·ª£i √Ω commands
                valid_commands = ['h', 'help', 'q', 'quit', 'l', 'list', 's', 'search', 'f', 'r', 'set', 'clear']
                suggestions = suggest_command(command, valid_commands)
                if suggestions:
                    print_command_suggestions(command, suggestions)
                else:
                    print(Colors.info("üí° Nh·∫≠p 'h' ho·∫∑c 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n"))
        
        except (EOFError, KeyboardInterrupt):
            # X·ª≠ l√Ω EOF error (input stream b·ªã ƒë√≥ng) ho·∫∑c Ctrl+C
            print()
            print(Colors.info("üëã T·∫°m bi·ªát!"))
            sys.exit(0)
        
        except Exception as e:
            # X·ª≠ l√Ω c√°c l·ªói kh√°c
            try:
                print()
                print(Colors.error(f"‚ùå L·ªói: {e}"))
                import traceback
                traceback.print_exc()
            except Exception:
                # N·∫øu kh√¥ng print ƒë∆∞·ª£c do encoding, d√πng ASCII
                print(f"\nL·ªói: {str(e)}")


if __name__ == "__main__":
    main()
