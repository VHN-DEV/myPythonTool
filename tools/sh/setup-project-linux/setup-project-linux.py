#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tool: Setup Project Linux - Qu·∫£n l√Ω v√† c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng Linux

M·ª•c ƒë√≠ch: Wrapper Python cho c√°c shell scripts qu·∫£n l√Ω Linux server
L√Ω do: T√≠ch h·ª£p v√†o menu Python tool, ch·∫°y tr√™n Windows (Git Bash/WSL) ho·∫∑c Linux
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

# L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a shell scripts
SCRIPT_DIR = Path(__file__).parent.parent.parent / "tools" / "sh" / "setup-project-linux"


def find_bash():
    """T√¨m bash executable (Git Bash ho·∫∑c WSL tr√™n Windows, bash m·∫∑c ƒë·ªãnh tr√™n Linux)"""
    # Tr√™n Linux/macOS, d√πng bash m·∫∑c ƒë·ªãnh
    if sys.platform.startswith('linux') or sys.platform == 'darwin':
        bash_path = shutil.which('bash')
        if bash_path:
            return ['bash']
    
    # Tr√™n Windows, th·ª≠ t√¨m Git Bash ho·∫∑c WSL
    if sys.platform == 'win32':
        # Th·ª≠ Git Bash (th∆∞·ªùng c√≥ trong Program Files)
        git_bash_paths = [
            r"C:\Program Files\Git\bin\bash.exe",
            r"C:\Program Files (x86)\Git\bin\bash.exe",
            os.path.expanduser(r"~\AppData\Local\Programs\Git\bin\bash.exe")
        ]
        
        for bash_path in git_bash_paths:
            if os.path.exists(bash_path):
                return [bash_path]
        
        # Th·ª≠ WSL
        wsl_path = shutil.which('wsl')
        if wsl_path:
            return ['wsl', 'bash']
        
        # Th·ª≠ bash.exe tr·ª±c ti·∫øp (c√≥ th·ªÉ trong PATH)
        bash_exe = shutil.which('bash.exe')
        if bash_exe:
            return [bash_exe]
    
    # Fallback: th·ª≠ bash m·∫∑c ƒë·ªãnh
    return ['bash']


def run_app_sh():
    """Ch·∫°y app.sh script"""
    app_sh_path = SCRIPT_DIR / "app.sh"
    
    if not app_sh_path.exists():
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file app.sh!")
        print(f"   ƒê∆∞·ªùng d·∫´n mong ƒë·ª£i: {app_sh_path}")
        return
    
    try:
        # T√¨m bash executable
        bash_cmd = find_bash()
        
        # Tr√™n Windows v·ªõi Git Bash, c·∫ßn chuy·ªÉn ƒë∆∞·ªùng d·∫´n sang format Unix
        if sys.platform == 'win32' and 'Git' in str(bash_cmd[0]):
            # Chuy·ªÉn D:\path\to\app.sh th√†nh /d/path/to/app.sh
            script_path_str = str(app_sh_path.resolve())
            if ':' in script_path_str:
                drive = script_path_str[0].lower()
                unix_path = script_path_str.replace('\\', '/').replace(f'{drive}:', f'/{drive}', 1)
            else:
                unix_path = script_path_str.replace('\\', '/')
            # Ch·∫°y script v·ªõi ƒë∆∞·ªùng d·∫´n Unix
            cmd = bash_cmd + [unix_path]
        elif sys.platform == 'win32' and bash_cmd[0] == 'wsl':
            # V·ªõi WSL, ch·∫°y script tr·ª±c ti·∫øp
            cmd = bash_cmd + [str(app_sh_path)]
        else:
            # Tr√™n Linux/macOS, ch·∫°y tr·ª±c ti·∫øp
            cmd = bash_cmd + [str(app_sh_path)]
        
        # ƒê·∫£m b·∫£o script c√≥ quy·ªÅn th·ª±c thi (ch·ªâ tr√™n Linux/macOS)
        if not sys.platform == 'win32':
            os.chmod(app_sh_path, 0o755)
        
        # Ch·∫°y script
        subprocess.run(cmd, check=False)
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·∫°y script: {e}")
        print(f"   H√£y ƒë·∫£m b·∫£o ƒë√£ c√†i Git Bash ho·∫∑c WSL tr√™n Windows")


def main():
    """H√†m ch√≠nh - Ch·∫°y tr·ª±c ti·∫øp app.sh"""
    print("=" * 60)
    print("           SETUP PROJECT LINUX")
    print("=" * 60)
    print()
    
    # Ki·ªÉm tra bash c√≥ s·∫µn kh√¥ng
    bash_cmd = find_bash()
    if not shutil.which(bash_cmd[0]) and not os.path.exists(bash_cmd[0]):
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y bash!")
        print("   Tr√™n Windows, c·∫ßn c√†i Git Bash ho·∫∑c WSL")
        print("   Tr√™n Linux/macOS, c·∫ßn c√†i bash")
        print()
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    # Ch·∫°y app.sh tr·ª±c ti·∫øp
    print("üöÄ ƒêang ch·∫°y app.sh...\n")
    run_app_sh()


if __name__ == "__main__":
    main()

