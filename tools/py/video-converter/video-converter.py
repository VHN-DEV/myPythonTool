#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tool: Chuy·ªÉn ƒë·ªïi v√† x·ª≠ l√Ω video
M·ª•c ƒë√≠ch: Convert format, compress, trim, extract audio
"""

import os
import sys
import datetime
import subprocess
import importlib
from pathlib import Path


def print_header():
    """In header c·ªßa tool"""
    print("=" * 60)
    print("  TOOL CHUY·ªÇN ƒê·ªîI V√Ä X·ª¨ L√ù VIDEO")
    print("=" * 60)
    print()


def verify_moviepy_installed():
    """
    Ki·ªÉm tra xem moviepy c√≥ th·ª±c s·ª± ƒë∆∞·ª£c c√†i ƒë·∫∑t kh√¥ng
    
    Returns:
        tuple: (bool, str, str) - (is_installed, version_or_error, location_or_empty)
    """
    try:
        # Ki·ªÉm tra b·∫±ng pip show
        result = subprocess.run(
            [sys.executable, "-m", "pip", "show", "moviepy"],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            version = "installed"
            location = ""
            # Parse version v√† location t·ª´ output
            for line in result.stdout.split('\n'):
                if line.startswith('Version:'):
                    version = line.split(':', 1)[1].strip()
                elif line.startswith('Location:'):
                    location = line.split(':', 1)[1].strip()
            return True, version, location
        else:
            return False, "not found in pip", ""
    except Exception as e:
        return False, f"error: {str(e)}", ""


def check_moviepy_files(location):
    """
    Ki·ªÉm tra xem c√°c file moviepy c√≥ t·ªìn t·∫°i kh√¥ng
    
    Returns:
        tuple: (bool, str) - (files_exist, error_message)
    """
    if not location:
        return False, "Location kh√¥ng h·ª£p l·ªá"
    
    moviepy_dir = os.path.join(location, "moviepy")
    if not os.path.exists(moviepy_dir):
        return False, f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {moviepy_dir}"
    
    __init__file = os.path.join(moviepy_dir, "__init__.py")
    if not os.path.exists(__init__file):
        return False, f"Kh√¥ng t√¨m th·∫•y file: {__init__file}"
    
    # Ki·ªÉm tra xem c√≥ module video (moviepy 2.x) ho·∫∑c editor (moviepy 1.x)
    video_module = os.path.join(moviepy_dir, "video")
    editor_file = os.path.join(moviepy_dir, "editor.py")
    editor_dir = os.path.join(moviepy_dir, "editor")
    
    # Module video (moviepy 2.x) ho·∫∑c editor (moviepy 1.x) ƒë·ªÅu OK
    if os.path.exists(video_module) or os.path.exists(editor_file) or os.path.exists(editor_dir):
        return True, "OK"
    
    # Th·ª≠ ki·ªÉm tra xem c√≥ file n√†o ch·ª©a "video" ho·∫∑c "editor" kh√¥ng
    try:
        files = os.listdir(moviepy_dir)
        if any('video' in f.lower() or 'editor' in f.lower() for f in files):
            return True, "OK (c·∫•u tr√∫c kh√°c)"
    except:
        pass
    
    return False, f"Kh√¥ng t√¨m th·∫•y module video ho·∫∑c editor"


def fix_sys_path_and_import():
    """
    Th·ª≠ t·ª± ƒë·ªông s·ª≠a sys.path v√† import moviepy
    
    Returns:
        tuple: (bool, str) - (success, message)
    """
    try:
        # L·∫•y th√¥ng tin t·ª´ pip show
        is_installed, version, location = verify_moviepy_installed()
        
        if not is_installed or not location:
            return False, "Kh√¥ng t√¨m th·∫•y location c·ªßa moviepy"
        
        # Th√™m location v√†o sys.path n·∫øu ch∆∞a c√≥
        if location and location not in sys.path:
            sys.path.insert(0, location)
            print(f"   ‚úì ƒê√£ th√™m v√†o sys.path: {location}")
        
        # Th·ª≠ t√¨m site-packages t·ª´ Python executable
        import site
        try:
            # L·∫•y site-packages paths
            site_packages = site.getsitepackages()
            for sp in site_packages:
                if sp not in sys.path:
                    sys.path.insert(0, sp)
                    print(f"   ‚úì ƒê√£ th√™m site-packages: {sp}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y site-packages: {e}")
        
        # Clear import cache
        modules_to_remove = [k for k in sys.modules.keys() if k.startswith('moviepy')]
        for module in modules_to_remove:
            del sys.modules[module]
        
        # Invalidate import cache
        import importlib
        importlib.invalidate_caches()
        
        # Debug: Hi·ªÉn th·ªã sys.path ƒë·ªÉ ki·ªÉm tra
        print(f"   üìÇ sys.path c√≥ {len(sys.path)} entries")
        print(f"   üìÇ Location trong sys.path: {location in sys.path}")
        
        # Th·ª≠ import t·ª´ng b∆∞·ªõc ƒë·ªÉ xem l·ªói c·ª• th·ªÉ
        try:
            import moviepy
            print(f"   ‚úì Import moviepy th√†nh c√¥ng")
            print(f"   üìç moviepy.__file__: {getattr(moviepy, '__file__', 'N/A')}")
        except Exception as e:
            error_msg = str(e)
            print(f"   ‚ùå L·ªói import moviepy: {error_msg}")
            # Ki·ªÉm tra xem c√≥ ph·∫£i do dependencies kh√¥ng
            if "decorator" in error_msg.lower() or "imageio" in error_msg.lower() or "proglog" in error_msg.lower():
                return False, f"Thi·∫øu dependencies: {error_msg}"
            return False, f"Kh√¥ng th·ªÉ import moviepy: {error_msg}"
        
        # Th·ª≠ import VideoFileClip t·ª´ moviepy (moviepy 2.x kh√¥ng c√≥ module editor)
        try:
            from moviepy import VideoFileClip
            print(f"   ‚úì Import VideoFileClip t·ª´ moviepy th√†nh c√¥ng (moviepy 2.x)")
            return True, f"ƒê√£ import th√†nh c√¥ng moviepy {version}"
        except Exception as e:
            error_msg = str(e)
            print(f"   ‚ùå L·ªói import VideoFileClip t·ª´ moviepy: {error_msg}")
            
            # Ki·ªÉm tra c·∫•u tr√∫c package
            try:
                import os
                moviepy_dir = os.path.dirname(moviepy.__file__)
                print(f"   üìÅ Th∆∞ m·ª•c moviepy: {moviepy_dir}")
                
                # Ki·ªÉm tra xem c√≥ VideoFileClip kh√¥ng
                video_module = os.path.join(moviepy_dir, "video")
                if os.path.exists(video_module):
                    print(f"   ‚úì T√¨m th·∫•y module video/")
                    try:
                        files = os.listdir(video_module)
                        print(f"   üìã C√°c file trong video/: {', '.join(files[:5])}")
                    except:
                        pass
                
                # Th·ª≠ li·ªát k√™ c√°c file trong moviepy ƒë·ªÉ debug
                try:
                    files = os.listdir(moviepy_dir)
                    print(f"   üìã C√°c file/module trong moviepy: {', '.join(files[:10])}")
                except:
                    pass
            except Exception as debug_err:
                print(f"   ‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra c·∫•u tr√∫c: {debug_err}")
            
            # Th·ª≠ c√°ch import c≈© (moviepy 1.x) ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c
            try:
                import moviepy.editor as mp
                print(f"   ‚úì Import th√†nh c√¥ng b·∫±ng 'moviepy.editor' (phi√™n b·∫£n c≈©)")
                return True, f"ƒê√£ import th√†nh c√¥ng moviepy {version} (d√πng editor)"
            except Exception as e2:
                print(f"   ‚ùå Th·ª≠ 'moviepy.editor' c≈©ng th·∫•t b·∫°i: {e2}")
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i do dependencies kh√¥ng
            if "No module named" in error_msg:
                missing_module = error_msg.split("'")[1] if "'" in error_msg else "unknown"
                return False, f"Thi·∫øu module '{missing_module}'. C√≥ th·ªÉ c·∫ßn c√†i dependencies ho·∫∑c package b·ªã h·ªèng."
            return False, f"Kh√¥ng th·ªÉ import VideoFileClip t·ª´ moviepy: {error_msg}"
        
    except ImportError as e:
        return False, f"ImportError: {str(e)}"
    except Exception as e:
        return False, f"L·ªói: {str(e)}"


def install_moviepy():
    """
    C√†i ƒë·∫∑t moviepy t·ª± ƒë·ªông
    
    Returns:
        bool: True n·∫øu c√†i ƒë·∫∑t th√†nh c√¥ng
    """
    try:
        print("\nüì¶ ƒêang c√†i ƒë·∫∑t moviepy...")
        print("   (C√≥ th·ªÉ m·∫•t v√†i ph√∫t, vui l√≤ng ƒë·ª£i...)\n")
        
        result = subprocess.run(
            [sys.executable, "-m", "pip", "install", "moviepy>=1.0.3"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            # Ki·ªÉm tra l·∫°i ƒë·ªÉ x√°c nh·∫≠n
            is_installed, version, location = verify_moviepy_installed()
            if is_installed:
                print(f"‚úÖ C√†i ƒë·∫∑t moviepy th√†nh c√¥ng! (version: {version})")
                # Th·ª≠ import ngay sau khi c√†i
                try:
                    # Th√™m location v√†o sys.path
                    if location and location not in sys.path:
                        sys.path.insert(0, location)
                    
                    # Clear cache v√† import
                    modules_to_remove = [k for k in sys.modules.keys() if k.startswith('moviepy')]
                    for module in modules_to_remove:
                        del sys.modules[module]
                    
                    import importlib
                    importlib.invalidate_caches()
                    
                    from moviepy import VideoFileClip
                    print("‚úÖ ƒê√£ import moviepy th√†nh c√¥ng!")
                except:
                    pass  # N·∫øu kh√¥ng import ƒë∆∞·ª£c ngay, kh√¥ng sao, c·∫ßn restart process
                return True
            else:
                print("‚ö†Ô∏è  Pip b√°o c√†i ƒë·∫∑t th√†nh c√¥ng nh∆∞ng kh√¥ng t√¨m th·∫•y package.")
                print("üí° C√≥ th·ªÉ package ƒë∆∞·ª£c c√†i v√†o m√¥i tr∆∞·ªùng Python kh√°c.")
                print(f"   Python hi·ªán t·∫°i: {sys.executable}")
                print("\nüí° Th·ª≠ c√†i ƒë·∫∑t th·ªß c√¥ng:")
                print(f"   {sys.executable} -m pip install moviepy")
                return False
        else:
            print("‚ùå L·ªói khi c√†i ƒë·∫∑t moviepy:")
            if result.stderr:
                print(result.stderr)
            if result.stdout:
                print(result.stdout)
            return False
    except Exception as e:
        print(f"‚ùå L·ªói khi c√†i ƒë·∫∑t: {e}")
        return False


def check_dependencies():
    """
    Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
    
    M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o user ƒë√£ c√†i moviepy v√† ffmpeg
    L√Ω do: moviepy c·∫ßn thi·∫øt cho x·ª≠ l√Ω video, ffmpeg l√† backend
    """
    try:
        # Th·ª≠ import theo c√°ch m·ªõi (moviepy 2.x)
        from moviepy import VideoFileClip
        print("‚úÖ Th∆∞ vi·ªán moviepy: OK")
    except ImportError as e:
        # Ki·ªÉm tra xem package c√≥ ƒë∆∞·ª£c c√†i kh√¥ng
        is_installed, version, location = verify_moviepy_installed()
        
        print("‚ùå Thi·∫øu th∆∞ vi·ªán moviepy!")
        
        if is_installed:
            print(f"\n‚ö†Ô∏è  Package ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t (version: {version})")
            print("   nh∆∞ng kh√¥ng th·ªÉ import ƒë∆∞·ª£c.")
            print(f"   Python hi·ªán t·∫°i: {sys.executable}")
            
            # Th·ª≠ t·ª± ƒë·ªông s·ª≠a sys.path
            print("\nüîß ƒêang th·ª≠ t·ª± ƒë·ªông s·ª≠a v·∫•n ƒë·ªÅ sys.path...")
            success, message = fix_sys_path_and_import()
            
            if success:
                print(f"‚úÖ {message}")
                print("‚úÖ Th∆∞ vi·ªán moviepy: OK")
            else:
                print(f"‚ùå {message}")
                print("\nüí° L∆∞u √Ω: Moviepy 2.x ƒë√£ thay ƒë·ªïi c·∫•u tr√∫c, kh√¥ng c√≤n module 'editor'")
                print("   C·∫ßn import tr·ª±c ti·∫øp: from moviepy import VideoFileClip")
                print("\nüí° C√≥ th·ªÉ do:")
                print("   - Package b·ªã h·ªèng ho·∫∑c kh√¥ng ƒë·∫ßy ƒë·ªß")
                print("   - Package ƒë∆∞·ª£c c√†i v√†o m√¥i tr∆∞·ªùng Python kh√°c")
                print("   - V·∫•n ƒë·ªÅ v·ªõi dependencies")
                print(f"   - Location: {location}")
                
                # ƒê·ªÅ xu·∫•t c√†i ƒë·∫∑t l·∫°i
                print("\nüîß B·∫°n c√≥ mu·ªën th·ª≠ c√†i ƒë·∫∑t l·∫°i moviepy kh√¥ng?")
                print("1. C√≥ - C√†i ƒë·∫∑t l·∫°i (--force-reinstall)")
                print("2. Kh√¥ng - T√¥i s·∫Ω t·ª± x·ª≠ l√Ω")
                
                choice = input("\nCh·ªçn (1/2, m·∫∑c ƒë·ªãnh: 2): ").strip()
                
                if choice == "1":
                    print("\nüì¶ ƒêang c√†i ƒë·∫∑t l·∫°i moviepy...")
                    result = subprocess.run(
                        [sys.executable, "-m", "pip", "install", "--force-reinstall", "--no-cache-dir", "moviepy>=1.0.3"],
                        capture_output=True,
                        text=True
                    )
                    
                    if result.returncode == 0:
                        print("‚úÖ ƒê√£ c√†i ƒë·∫∑t l·∫°i th√†nh c√¥ng!")
                        print("üí° Tool c·∫ßn restart ƒë·ªÉ nh·∫≠n package m·ªõi.")
                        print("üí° Vui l√≤ng ch·∫°y l·∫°i tool t·ª´ menu ch√≠nh.")
                        return False
                    else:
                        print("‚ùå L·ªói khi c√†i ƒë·∫∑t l·∫°i:")
                        if result.stderr:
                            print(result.stderr)
                        return False
                else:
                    print("\nüí° Gi·∫£i ph√°p:")
                    print(f"   1. Ki·ªÉm tra: {sys.executable} -m pip list | findstr moviepy")
                    print(f"   2. C√†i ƒë·∫∑t l·∫°i: {sys.executable} -m pip install --force-reinstall moviepy")
                    print("   3. Ho·∫∑c restart Python process")
                    return False
        
        print("\nB·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t t·ª± ƒë·ªông kh√¥ng?")
        print("1. C√≥ - T·ª± ƒë·ªông c√†i ƒë·∫∑t (khuy·∫øn ngh·ªã)")
        print("2. Kh√¥ng - T√¥i s·∫Ω c√†i ƒë·∫∑t th·ªß c√¥ng")
        
        choice = input("\nCh·ªçn (1/2, m·∫∑c ƒë·ªãnh: 1): ").strip()
        
        if not choice or choice == "1":
            if install_moviepy():
                # Th·ª≠ reload sys.path v√† import l·∫°i
                try:
                    # Clear import cache
                    modules_to_remove = [k for k in sys.modules.keys() if k.startswith('moviepy')]
                    for module in modules_to_remove:
                        del sys.modules[module]
                    
                    # Reload site-packages paths
                    import site
                    import importlib
                    site.main()
                    
                    # Th·ª≠ th√™m site-packages v√†o sys.path n·∫øu ch∆∞a c√≥
                    try:
                        import pkg_resources
                        # pkg_resources t·ª± ƒë·ªông c·∫≠p nh·∫≠t sys.path
                    except:
                        pass
                    
                    # Th·ª≠ import l·∫°i v·ªõi importlib
                    importlib.invalidate_caches()
                    
                    # Th·ª≠ import l·∫°i
                    from moviepy import VideoFileClip
                    print("‚úÖ Th∆∞ vi·ªán moviepy: OK")
                except (ImportError, ModuleNotFoundError) as import_err:
                    # Package ƒë√£ ƒë∆∞·ª£c c√†i nh∆∞ng c·∫ßn restart Python process
                    print("\n" + "="*60)
                    print("‚úÖ Package ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!")
                    print("="*60)
                    print("\nüìù L∆∞u √Ω quan tr·ªçng:")
                    print("   Python process hi·ªán t·∫°i c·∫ßn kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ nh·∫≠n package m·ªõi.")
                    print("   ƒê√¢y l√† h√†nh vi b√¨nh th∆∞·ªùng c·ªßa Python.")
                    print(f"\n   Python: {sys.executable}")
                    print("\nüí° C√°c b∆∞·ªõc ti·∫øp theo:")
                    print("   1. Tool s·∫Ω t·ª± ƒë·ªông tho√°t")
                    print("   2. Quay l·∫°i menu ch√≠nh v√† ch·∫°y l·∫°i tool")
                    print("   3. Tool s·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!")
                    print("\n" + "="*60)
                    print("\n‚è≥ ƒêang tho√°t tool...")
                    return False
            else:
                print("\nüí° C√†i ƒë·∫∑t th·ªß c√¥ng:")
                print(f"   {sys.executable} -m pip install moviepy")
                print("üí° Sau khi c√†i ƒë·∫∑t, ch·∫°y l·∫°i tool.")
                return False
        else:
            print("\nüí° C√†i ƒë·∫∑t th·ªß c√¥ng:")
            print(f"   {sys.executable} -m pip install moviepy")
            print("üí° Sau khi c√†i ƒë·∫∑t, ch·∫°y l·∫°i tool.")
            return False
    
    # Check ffmpeg
    try:
        from moviepy.config import get_setting
        ffmpeg_path = get_setting("FFMPEG_BINARY")
        if ffmpeg_path and os.path.exists(ffmpeg_path):
            print(f"‚úÖ FFmpeg: OK ({ffmpeg_path})")
        else:
            # Ki·ªÉm tra ffmpeg trong PATH
            try:
                result = subprocess.run(
                    ["ffmpeg", "-version"],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                if result.returncode == 0:
                    print("‚úÖ FFmpeg: OK (t√¨m th·∫•y trong PATH)")
                else:
                    raise Exception("FFmpeg not found")
            except (subprocess.TimeoutExpired, FileNotFoundError, Exception):
                print("‚ö†Ô∏è  FFmpeg ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng!")
                print("\nH∆∞·ªõng d·∫´n c√†i FFmpeg:")
                print("Windows: T·∫£i t·∫°i https://www.gyan.dev/ffmpeg/builds/")
                print("        Gi·∫£i n√©n v√† th√™m v√†o PATH")
                print("Linux:   sudo apt-get install ffmpeg")
                print("macOS:   brew install ffmpeg")
                print("\n‚ö†Ô∏è  Tool v·∫´n c√≥ th·ªÉ ho·∫°t ƒë·ªông nh∆∞ng c√≥ th·ªÉ g·∫∑p l·ªói.")
                print("üí° Sau khi c√†i FFmpeg, ch·∫°y l·∫°i tool.")
                # Kh√¥ng return False v√¨ c√≥ th·ªÉ v·∫´n d√πng ƒë∆∞·ª£c v·ªõi m·ªôt s·ªë ch·ª©c nƒÉng
    except Exception as e:
        print("‚ö†Ô∏è  FFmpeg ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng!")
        print("\nH∆∞·ªõng d·∫´n c√†i FFmpeg:")
        print("Windows: T·∫£i t·∫°i https://www.gyan.dev/ffmpeg/builds/")
        print("        Gi·∫£i n√©n v√† th√™m v√†o PATH")
        print("Linux:   sudo apt-get install ffmpeg")
        print("macOS:   brew install ffmpeg")
        print("\n‚ö†Ô∏è  Tool v·∫´n c√≥ th·ªÉ ho·∫°t ƒë·ªông nh∆∞ng c√≥ th·ªÉ g·∫∑p l·ªói.")
        print("üí° Sau khi c√†i FFmpeg, ch·∫°y l·∫°i tool.")
        # Kh√¥ng return False v√¨ c√≥ th·ªÉ v·∫´n d√πng ƒë∆∞·ª£c v·ªõi m·ªôt s·ªë ch·ª©c nƒÉng
    
    return True


def format_size(size_bytes):
    """Format dung l∆∞·ª£ng d·ªÖ ƒë·ªçc"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024.0


def format_time(seconds):
    """Format th·ªùi gian d·ªÖ ƒë·ªçc (HH:MM:SS)"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    
    if hours > 0:
        return f"{hours:02d}:{minutes:02d}:{secs:02d}"
    else:
        return f"{minutes:02d}:{secs:02d}"


def get_video_info(video_path):
    """
    L·∫•y th√¥ng tin video
    
    Returns:
        dict: Th√¥ng tin video (duration, fps, resolution, size...)
    
    Gi·∫£i th√≠ch:
    - D√πng moviepy ƒë·ªÉ ƒë·ªçc metadata
    - Hi·ªÉn th·ªã info c∆° b·∫£n ƒë·ªÉ user bi·∫øt
    """
    from moviepy import VideoFileClip
    
    try:
        clip = VideoFileClip(video_path)
        
        info = {
            'duration': clip.duration,
            'fps': clip.fps,
            'size': clip.size,  # (width, height)
            'file_size': os.path.getsize(video_path),
            'audio': clip.audio is not None
        }
        
        clip.close()
        return info
        
    except Exception as e:
        print(f"‚ùå Loi khi doc video: {e}")
        return None


def display_video_info(video_path):
    """Hi·ªÉn th·ªã th√¥ng tin video"""
    print(f"\nüìπ Video: {os.path.basename(video_path)}")
    print("=" * 60)
    
    info = get_video_info(video_path)
    
    if not info:
        return
    
    width, height = info['size']
    
    print(f"Thoi luong: {format_time(info['duration'])}")
    print(f"Do phan giai: {width}x{height}")
    print(f"FPS: {info['fps']:.2f}")
    print(f"Audio: {'Co' if info['audio'] else 'Khong'}")
    print(f"Kich thuoc: {format_size(info['file_size'])}")
    print("=" * 60)


def convert_video_format(input_path, output_path, output_format='mp4', 
                        codec='libx264', audio_codec='aac', bitrate=None,
                        fps=None, preset='medium'):
    """
    Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng video
    
    Args:
        input_path: Video g·ªëc
        output_path: Video output
        output_format: Format ƒë√≠ch (mp4, avi, mkv, webm, mov)
        codec: Video codec (libx264, libx265, mpeg4, libvpx)
        audio_codec: Audio codec (aac, mp3, libvorbis)
        bitrate: Bitrate (None = auto)
        fps: FPS m·ªõi (None = gi·ªØ nguy√™n)
        preset: Preset encode (ultrafast, fast, medium, slow, veryslow)
    
    Gi·∫£i th√≠ch:
    - Load video v·ªõi moviepy
    - Convert sang format m·ªõi v·ªõi codec ch·ªâ ƒë·ªãnh
    - Preset ·∫£nh h∆∞·ªüng t·ªëc ƒë·ªô/ch·∫•t l∆∞·ª£ng
      + ultrafast: Nhanh nh∆∞ng file l·ªõn
      + slow: Ch·∫≠m nh∆∞ng file nh·ªè, ch·∫•t l∆∞·ª£ng t·ªët
    """
    from moviepy import VideoFileClip
    
    try:
        print(f"\nüé¨ Dang chuyen doi...")
        print(f"   Format: {output_format.upper()}")
        print(f"   Codec: {codec}")
        print(f"   Preset: {preset}\n")
        
        # Load video
        clip = VideoFileClip(input_path)
        
        # ƒêi·ªÅu ch·ªânh FPS n·∫øu c√≥
        if fps and fps != clip.fps:
            clip = clip.set_fps(fps)
            print(f"   ‚úì Dieu chinh FPS: {clip.fps} ‚Üí {fps}")
        
        # Write video
        clip.write_videofile(
            output_path,
            codec=codec,
            audio_codec=audio_codec,
            bitrate=bitrate,
            preset=preset,
            verbose=False,
            logger=None
        )
        
        clip.close()
        
        # So s√°nh k√≠ch th∆∞·ªõc
        original_size = os.path.getsize(input_path)
        output_size = os.path.getsize(output_path)
        ratio = (output_size / original_size) * 100
        
        print(f"\n‚úÖ Chuyen doi thanh cong!")
        print(f"   üìÑ File goc: {format_size(original_size)}")
        print(f"   üìÑ File moi: {format_size(output_size)} ({ratio:.1f}%)")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi chuyen doi: {e}")
        return False


def compress_video(input_path, output_path, target_size_mb=None, 
                   quality='medium', resolution_scale=1.0):
    """
    N√©n video gi·∫£m dung l∆∞·ª£ng
    
    Args:
        input_path: Video g·ªëc
        output_path: Video n√©n
        target_size_mb: Dung l∆∞·ª£ng m·ª•c ti√™u (MB)
        quality: Ch·∫•t l∆∞·ª£ng (low, medium, high)
        resolution_scale: T·ª∑ l·ªá gi·∫£m resolution (0.5 = gi·∫£m 50%)
    
    Gi·∫£i th√≠ch:
    - Gi·∫£m resolution n·∫øu c·∫ßn
    - ƒêi·ªÅu ch·ªânh bitrate theo target size
    - N√©n v·ªõi preset ph√π h·ª£p
    """
    from moviepy import VideoFileClip
    
    try:
        print(f"\nüì¶ Dang nen video...")
        print(f"   Quality: {quality}")
        
        # Load video
        clip = VideoFileClip(input_path)
        
        # Resize n·∫øu c·∫ßn
        if resolution_scale < 1.0:
            new_width = int(clip.w * resolution_scale)
            new_height = int(clip.h * resolution_scale)
            # ƒê·∫£m b·∫£o width/height l√† s·ªë ch·∫µn (y√™u c·∫ßu c·ªßa codec)
            new_width = new_width if new_width % 2 == 0 else new_width - 1
            new_height = new_height if new_height % 2 == 0 else new_height - 1
            
            clip = clip.resize((new_width, new_height))
            print(f"   ‚úì Resize: {clip.w}x{clip.h} ‚Üí {new_width}x{new_height}")
        
        # T√≠nh bitrate d·ª±a tr√™n target size
        bitrate = None
        if target_size_mb:
            # T√≠nh bitrate c·∫ßn thi·∫øt (kbps)
            target_size_bits = target_size_mb * 8 * 1024 * 1024
            duration = clip.duration
            bitrate = f"{int(target_size_bits / duration / 1000)}k"
            print(f"   ‚úì Target size: {target_size_mb}MB ‚Üí Bitrate: {bitrate}")
        
        # Preset theo quality
        presets = {
            'low': 'ultrafast',
            'medium': 'fast',
            'high': 'slow'
        }
        preset = presets.get(quality, 'fast')
        
        # Write
        clip.write_videofile(
            output_path,
            codec='libx264',
            audio_codec='aac',
            bitrate=bitrate,
            preset=preset,
            verbose=False,
            logger=None
        )
        
        clip.close()
        
        # K·∫øt qu·∫£
        original_size = os.path.getsize(input_path)
        compressed_size = os.path.getsize(output_path)
        reduction = ((original_size - compressed_size) / original_size) * 100
        
        print(f"\n‚úÖ Nen thanh cong!")
        print(f"   üìÑ File goc: {format_size(original_size)}")
        print(f"   üìÑ File nen: {format_size(compressed_size)}")
        print(f"   üíØ Giam: {reduction:.1f}%")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi nen video: {e}")
        return False


def trim_video(input_path, output_path, start_time, end_time):
    """
    C·∫Øt video
    
    Args:
        input_path: Video g·ªëc
        output_path: Video ƒë√£ c·∫Øt
        start_time: Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu (gi√¢y ho·∫∑c "MM:SS" ho·∫∑c "HH:MM:SS")
        end_time: Th·ªùi ƒëi·ªÉm k·∫øt th√∫c
    
    Gi·∫£i th√≠ch:
    - C·∫Øt video t·ª´ start_time ƒë·∫øn end_time
    - Gi·ªØ nguy√™n codec v√† quality
    """
    from moviepy import VideoFileClip
    
    try:
        # Parse time string to seconds
        def parse_time(time_str):
            if isinstance(time_str, (int, float)):
                return time_str
            
            parts = time_str.split(':')
            if len(parts) == 2:  # MM:SS
                return int(parts[0]) * 60 + int(parts[1])
            elif len(parts) == 3:  # HH:MM:SS
                return int(parts[0]) * 3600 + int(parts[1]) * 60 + int(parts[2])
            else:
                return float(time_str)
        
        start = parse_time(start_time)
        end = parse_time(end_time)
        
        print(f"\n‚úÇÔ∏è  Dang cat video...")
        print(f"   Tu: {format_time(start)}")
        print(f"   Den: {format_time(end)}")
        print(f"   Thoi luong: {format_time(end - start)}\n")
        
        # Load v√† c·∫Øt
        clip = VideoFileClip(input_path).subclip(start, end)
        
        # Write
        clip.write_videofile(
            output_path,
            codec='libx264',
            audio_codec='aac',
            verbose=False,
            logger=None
        )
        
        clip.close()
        
        print(f"\n‚úÖ Cat thanh cong!")
        print(f"   üìÑ File output: {output_path}")
        print(f"   üìä Kich thuoc: {format_size(os.path.getsize(output_path))}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi cat video: {e}")
        return False


def extract_audio(input_path, output_path, audio_format='mp3', bitrate='192k'):
    """
    Tr√≠ch xu·∫•t audio t·ª´ video
    
    Args:
        input_path: Video g·ªëc
        output_path: File audio output
        audio_format: Format audio (mp3, wav, aac)
        bitrate: Bitrate audio (128k, 192k, 320k)
    
    Gi·∫£i th√≠ch:
    - Extract audio track t·ª´ video
    - Convert sang format mong mu·ªën
    """
    from moviepy import VideoFileClip
    
    try:
        print(f"\nüéµ Dang trich xuat audio...")
        print(f"   Format: {audio_format.upper()}")
        print(f"   Bitrate: {bitrate}\n")
        
        # Load video
        clip = VideoFileClip(input_path)
        
        if not clip.audio:
            print("‚ùå Video khong co audio!")
            clip.close()
            return False
        
        # Extract audio
        audio = clip.audio
        audio.write_audiofile(
            output_path,
            bitrate=bitrate,
            verbose=False,
            logger=None
        )
        
        audio.close()
        clip.close()
        
        print(f"\n‚úÖ Trich xuat thanh cong!")
        print(f"   üìÑ File audio: {output_path}")
        print(f"   üìä Kich thuoc: {format_size(os.path.getsize(output_path))}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi trich xuat audio: {e}")
        return False


def change_resolution(input_path, output_path, width=None, height=None, keep_aspect=True):
    """
    Thay ƒë·ªïi resolution video
    
    Args:
        input_path: Video g·ªëc
        output_path: Video m·ªõi
        width: Chi·ªÅu r·ªông m·ªõi
        height: Chi·ªÅu cao m·ªõi
        keep_aspect: Gi·ªØ t·ª∑ l·ªá khung h√¨nh
    
    Gi·∫£i th√≠ch:
    - Resize video v·ªÅ resolution m·ªõi
    - N·∫øu keep_aspect=True, t·ª± t√≠nh height/width ƒë·ªÉ gi·ªØ t·ª∑ l·ªá
    """
    from moviepy import VideoFileClip
    
    try:
        print(f"\nüñºÔ∏è  Dang thay doi resolution...")
        
        # Load video
        clip = VideoFileClip(input_path)
        
        original_width, original_height = clip.size
        
        # T√≠nh new size
        if keep_aspect:
            if width and not height:
                # T√≠nh height d·ª±a tr√™n width
                aspect_ratio = original_height / original_width
                height = int(width * aspect_ratio)
            elif height and not width:
                # T√≠nh width d·ª±a tr√™n height
                aspect_ratio = original_width / original_height
                width = int(height * aspect_ratio)
        
        # ƒê·∫£m b·∫£o width/height ch·∫µn
        if width:
            width = width if width % 2 == 0 else width - 1
        if height:
            height = height if height % 2 == 0 else height - 1
        
        print(f"   Resolution: {original_width}x{original_height} ‚Üí {width}x{height}\n")
        
        # Resize
        clip_resized = clip.resize((width, height))
        
        # Write
        clip_resized.write_videofile(
            output_path,
            codec='libx264',
            audio_codec='aac',
            verbose=False,
            logger=None
        )
        
        clip_resized.close()
        clip.close()
        
        print(f"\n‚úÖ Thay doi thanh cong!")
        print(f"   üìÑ File output: {output_path}")
        print(f"   üìä Kich thuoc: {format_size(os.path.getsize(output_path))}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Loi khi thay doi resolution: {e}")
        return False


def batch_convert(input_folder, output_folder, output_format='mp4', preset='medium'):
    """
    Convert h√†ng lo·∫°t video
    
    Gi·∫£i th√≠ch:
    - Qu√©t t·∫•t c·∫£ video trong th∆∞ m·ª•c
    - Convert t·ª´ng video sang format m·ªõi
    """
    from moviepy import VideoFileClip
    
    # C√°c format video h·ªó tr·ª£
    video_extensions = ['.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.webm', '.m4v', '.mpg', '.mpeg']
    
    # T√¨m video files
    video_files = [
        f for f in os.listdir(input_folder)
        if os.path.isfile(os.path.join(input_folder, f))
        and os.path.splitext(f)[1].lower() in video_extensions
    ]
    
    if not video_files:
        print("‚ùå Khong tim thay video nao!")
        return 0, 0
    
    print(f"üé¨ Tim thay {len(video_files)} video\n")
    
    # T·∫°o output folder
    os.makedirs(output_folder, exist_ok=True)
    
    success_count = 0
    error_count = 0
    
    for idx, filename in enumerate(video_files, 1):
        input_path = os.path.join(input_folder, filename)
        
        # Output filename v·ªõi extension m·ªõi
        base_name = Path(filename).stem
        output_filename = f"{base_name}.{output_format}"
        output_path = os.path.join(output_folder, output_filename)
        
        print(f"\n[{idx}/{len(video_files)}] {filename}")
        print("-" * 60)
        
        try:
            clip = VideoFileClip(input_path)
            
            clip.write_videofile(
                output_path,
                codec='libx264' if output_format == 'mp4' else 'mpeg4',
                audio_codec='aac',
                preset=preset,
                verbose=False,
                logger=None
            )
            
            clip.close()
            
            output_size = format_size(os.path.getsize(output_path))
            print(f"‚úÖ Thanh cong! ({output_size})")
            success_count += 1
            
        except Exception as e:
            print(f"‚ùå Loi: {e}")
            error_count += 1
    
    return success_count, error_count


def main():
    """
    H√†m ch√≠nh - Menu video tools
    
    Gi·∫£i th√≠ch:
    - Hi·ªÉn th·ªã menu c√°c ch·ª©c nƒÉng
    - X·ª≠ l√Ω input t·ª´ user
    - G·ªçi h√†m t∆∞∆°ng ·ª©ng
    """
    print_header()
    
    # Ki·ªÉm tra dependencies
    if not check_dependencies():
        print("\nüí° Sau khi c√†i ƒë·∫∑t, ch·∫°y l·∫°i tool.")
        return
    
    print("\n===== CH·ª®C NƒÇNG =====")
    print("1. Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng (Convert Format)")
    print("2. N√©n video (Compress)")
    print("3. C·∫Øt video (Trim)")
    print("4. Tr√≠ch xu·∫•t audio (Extract Audio)")
    print("5. Thay ƒë·ªïi resolution")
    print("6. Xem th√¥ng tin video")
    print("7. Chuy·ªÉn ƒë·ªïi h√†ng lo·∫°t (Batch Convert)")
    print("0. Tho√°t")
    
    choice = input("\nCh·ªçn ch·ª©c nƒÉng (0-7): ").strip()
    
    if choice == "0":
        print("Tho√°t ch∆∞∆°ng tr√¨nh.")
        return
    
    elif choice == "1":
        # Convert format
        print("\n===== CHUYEN DOI DINH DANG =====")
        
        input_file = input("Nhap duong dan video: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        display_video_info(input_file)
        
        print("\nDinh dang output:")
        print("1. MP4 (pho bien nhat)")
        print("2. AVI")
        print("3. MKV (chat luong cao)")
        print("4. WEBM (cho web)")
        print("5. MOV (Apple)")
        
        format_choice = input("\nChon dinh dang (1-5): ").strip()
        formats = {'1': 'mp4', '2': 'avi', '3': 'mkv', '4': 'webm', '5': 'mov'}
        output_format = formats.get(format_choice, 'mp4')
        
        output_file = input("Ten file output (Enter de tu dong): ").strip('"')
        if not output_file:
            base = Path(input_file).stem
            output_file = os.path.join(
                os.path.dirname(input_file),
                f"{base}_converted.{output_format}"
            )
        
        print("\nPreset (toc do/chat luong):")
        print("1. ultrafast (nhanh nhat)")
        print("2. fast")
        print("3. medium (can bang)")
        print("4. slow (chat luong tot)")
        
        preset_choice = input("\nChon preset (1-4, mac dinh 3): ").strip()
        presets = {'1': 'ultrafast', '2': 'fast', '3': 'medium', '4': 'slow'}
        preset = presets.get(preset_choice, 'medium')
        
        convert_video_format(input_file, output_file, output_format, preset=preset)
    
    elif choice == "2":
        # Compress
        print("\n===== NEN VIDEO =====")
        
        input_file = input("Nhap duong dan video: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        display_video_info(input_file)
        
        output_file = input("\nTen file output (Enter de tu dong): ").strip('"')
        if not output_file:
            base = Path(input_file).stem
            ext = Path(input_file).suffix
            output_file = os.path.join(
                os.path.dirname(input_file),
                f"{base}_compressed{ext}"
            )
        
        print("\nChat luong:")
        print("1. Low (nen manh, kich thuoc nho)")
        print("2. Medium (can bang)")
        print("3. High (nen nhe, chat luong tot)")
        
        quality_choice = input("\nChon chat luong (1-3, mac dinh 2): ").strip()
        qualities = {'1': 'low', '2': 'medium', '3': 'high'}
        quality = qualities.get(quality_choice, 'medium')
        
        resolution_input = input("\nGiam resolution? (%, 100=giu nguyen, 50=giam 50%): ").strip()
        resolution_scale = float(resolution_input) / 100 if resolution_input else 1.0
        
        target_size = input("\nDung luong muc tieu (MB, Enter de bo qua): ").strip()
        target_size_mb = int(target_size) if target_size else None
        
        compress_video(input_file, output_file, target_size_mb, quality, resolution_scale)
    
    elif choice == "3":
        # Trim
        print("\n===== CAT VIDEO =====")
        
        input_file = input("Nhap duong dan video: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        display_video_info(input_file)
        
        print("\nNhap thoi gian (dinh dang: MM:SS hoac HH:MM:SS hoac giay)")
        start_time = input("Bat dau tu (vd: 00:30 hoac 30): ").strip()
        end_time = input("Ket thuc tai (vd: 02:15 hoac 135): ").strip()
        
        output_file = input("\nTen file output (Enter de tu dong): ").strip('"')
        if not output_file:
            base = Path(input_file).stem
            ext = Path(input_file).suffix
            output_file = os.path.join(
                os.path.dirname(input_file),
                f"{base}_trimmed{ext}"
            )
        
        trim_video(input_file, output_file, start_time, end_time)
    
    elif choice == "4":
        # Extract audio
        print("\n===== TRICH XUAT AUDIO =====")
        
        input_file = input("Nhap duong dan video: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        display_video_info(input_file)
        
        print("\nDinh dang audio:")
        print("1. MP3 (pho bien)")
        print("2. WAV (khong mat du lieu)")
        print("3. AAC (chat luong tot)")
        
        format_choice = input("\nChon dinh dang (1-3, mac dinh 1): ").strip()
        formats = {'1': 'mp3', '2': 'wav', '3': 'aac'}
        audio_format = formats.get(format_choice, 'mp3')
        
        bitrate_input = input("Bitrate (128k/192k/320k, mac dinh 192k): ").strip()
        bitrate = bitrate_input if bitrate_input else '192k'
        
        output_file = input("\nTen file output (Enter de tu dong): ").strip('"')
        if not output_file:
            base = Path(input_file).stem
            output_file = os.path.join(
                os.path.dirname(input_file),
                f"{base}.{audio_format}"
            )
        
        extract_audio(input_file, output_file, audio_format, bitrate)
    
    elif choice == "5":
        # Change resolution
        print("\n===== THAY DOI RESOLUTION =====")
        
        input_file = input("Nhap duong dan video: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        display_video_info(input_file)
        
        print("\nPreset resolution:")
        print("1. 1920x1080 (Full HD)")
        print("2. 1280x720 (HD)")
        print("3. 854x480 (SD)")
        print("4. 640x360 (Low)")
        print("5. Custom")
        
        res_choice = input("\nChon (1-5): ").strip()
        
        if res_choice == "5":
            width = int(input("Chieu rong (width): "))
            height = int(input("Chieu cao (height, Enter de giu ty le): ").strip() or 0)
        else:
            resolutions = {
                '1': (1920, 1080),
                '2': (1280, 720),
                '3': (854, 480),
                '4': (640, 360)
            }
            width, height = resolutions.get(res_choice, (1280, 720))
        
        output_file = input("\nTen file output (Enter de tu dong): ").strip('"')
        if not output_file:
            base = Path(input_file).stem
            ext = Path(input_file).suffix
            output_file = os.path.join(
                os.path.dirname(input_file),
                f"{base}_{width}x{height if height else 'auto'}{ext}"
            )
        
        change_resolution(input_file, output_file, width, height if height else None)
    
    elif choice == "6":
        # Video info
        print("\n===== THONG TIN VIDEO =====")
        
        input_file = input("Nhap duong dan video: ").strip('"')
        if not os.path.isfile(input_file):
            print("‚ùå File khong ton tai!")
            return
        
        display_video_info(input_file)
    
    elif choice == "7":
        # Batch convert
        print("\n===== CHUYEN DOI HANG LOAT =====")
        
        input_folder = input("Thu muc chua video: ").strip('"')
        if not os.path.isdir(input_folder):
            print("‚ùå Thu muc khong ton tai!")
            return
        
        output_folder = input("Thu muc output (Enter de tao 'converted'): ").strip('"')
        if not output_folder:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output_folder = os.path.join(input_folder, f"converted_{timestamp}")
        
        format_choice = input("\nDinh dang output (mp4/avi/mkv, mac dinh mp4): ").strip()
        output_format = format_choice if format_choice else 'mp4'
        
        preset_choice = input("Preset (ultrafast/fast/medium/slow, mac dinh medium): ").strip()
        preset = preset_choice if preset_choice else 'medium'
        
        success, errors = batch_convert(input_folder, output_folder, output_format, preset)
        
        print(f"\n{'='*60}")
        print(f"‚úÖ Hoan thanh!")
        print(f"   - Thanh cong: {success} video")
        print(f"   - Loi: {errors} video")
        print(f"   - Thu muc output: {output_folder}")
        print(f"{'='*60}")
    
    else:
        print("‚ùå Lua chon khong hop le!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå ƒê√£ h·ªßy!")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")

