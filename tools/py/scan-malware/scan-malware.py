#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tool: Quét và phát hiện mã độc trong file code

Mục đích: Phát hiện các pattern mã độc, backdoor trong file PHP, JS, Python
Lý do: Bảo vệ dự án khỏi mã độc, shell, backdoor
"""

import os
import sys
import re
import csv
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Tuple

# Thêm thư mục cha vào sys.path để import utils
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from utils import (
    print_header, get_user_input, confirm_action,
    ensure_directory_exists, log_info, log_error, normalize_path
)
from utils.colors import Colors


# Các pattern nghi ngờ mã độc
SUSPICIOUS_PATTERNS = {
    'php': [
        (r'eval\s*\(', 'eval() - Code execution'),
        (r'base64_decode\s*\(', 'base64_decode() - Decode malicious code'),
        (r'gzinflate\s*\(', 'gzinflate() - Decompress malicious code'),
        (r'file_get_contents\s*\(["\']?http', 'file_get_contents() with remote URL - Remote file inclusion'),
        (r'shell_exec\s*\(', 'shell_exec() - Execute system commands'),
        (r'system\s*\(', 'system() - Execute system commands'),
        (r'passthru\s*\(', 'passthru() - Execute system commands'),
        (r'exec\s*\(', 'exec() - Execute system commands'),
        (r'preg_replace\s*\([^)]*/e', 'preg_replace() with /e modifier - Code injection'),
        (r'preg_replace_callback.*\$_(?:GET|POST|REQUEST)', 'preg_replace_callback with user input'),
        (r'eval\s*\(\s*\$_(?:GET|POST|REQUEST|COOKIE)', 'eval() with user input'),
        (r'assert\s*\(', 'assert() - Code execution'),
        (r'create_function\s*\(', 'create_function() - Code injection'),
        (r'call_user_func\s*\(\s*["\']?eval', 'call_user_func() with eval'),
        (r'call_user_func_array\s*\(\s*["\']?eval', 'call_user_func_array() with eval'),
        (r'include\s*\(\s*\$_(?:GET|POST|REQUEST)', 'include() with user input'),
        (r'require\s*\(\s*\$_(?:GET|POST|REQUEST)', 'require() with user input'),
    ],
    'javascript': [
        (r'eval\s*\(', 'eval() - Code execution'),
        (r'Function\s*\(', 'Function() constructor - Code execution'),
        (r'setTimeout\s*\(\s*["\']', 'setTimeout() with string - Code execution'),
        (r'setInterval\s*\(\s*["\']', 'setInterval() with string - Code execution'),
        (r'document\.write\s*\(\s*document\.cookie', 'document.write() with cookie - XSS'),
        (r'innerHTML\s*=.*\$_(?:GET|POST)', 'innerHTML with user input - XSS'),
        (r'location\s*=\s*.*\$_(?:GET|POST)', 'location redirect with user input'),
        (r'document\.location\s*=.*\$_(?:GET|POST)', 'document.location with user input'),
    ],
    'python': [
        (r'eval\s*\(', 'eval() - Code execution'),
        (r'exec\s*\(', 'exec() - Code execution'),
        (r'__import__\s*\(', '__import__() - Dynamic import'),
        (r'compile\s*\(.*mode\s*=\s*["\']exec', 'compile() with exec mode'),
        (r'subprocess\.(?:call|Popen)\s*\([^)]*shell\s*=\s*True', 'subprocess with shell=True - Command injection'),
        (r'os\.system\s*\(', 'os.system() - Execute system commands'),
        (r'os\.popen\s*\(', 'os.popen() - Execute system commands'),
        (r'shutil\.\w+\([^)]*\$_(?:GET|POST)', 'shutil with user input'),
    ]
}


def get_patterns_for_ext(ext: str) -> List[Tuple[str, str]]:
    """
    Lấy danh sách pattern theo extension
    
    Args:
        ext: Extension file (.php, .js, .py)
    
    Returns:
        list: Danh sách pattern (regex, description)
    """
    ext_lower = ext.lower().lstrip('.')
    if ext_lower == 'php':
        return SUSPICIOUS_PATTERNS['php']
    elif ext_lower == 'js':
        return SUSPICIOUS_PATTERNS['javascript']
    elif ext_lower == 'py':
        return SUSPICIOUS_PATTERNS['python']
    else:
        # Trả về tất cả pattern nếu không xác định được
        all_patterns = []
        for patterns in SUSPICIOUS_PATTERNS.values():
            all_patterns.extend(patterns)
        return list(set(all_patterns))  # Remove duplicates


def scan_file(file_path: Path, extensions: List[str]) -> List[Dict]:
    """
    Quét một file và tìm các pattern nghi ngờ
    
    Args:
        file_path: Đường dẫn file
        extensions: Danh sách extension cần quét
    
    Returns:
        list: Danh sách kết quả phát hiện
    """
    results = []
    file_ext = file_path.suffix.lower()
    
    # Kiểm tra extension
    if file_ext not in extensions:
        return results
    
    # Lấy patterns cho extension này
    patterns = get_patterns_for_ext(file_ext)
    
    try:
        # Đọc file với encoding UTF-8, fallback sang latin-1 nếu lỗi
        encodings = ['utf-8', 'latin-1', 'cp1252']
        content = None
        
        for enc in encodings:
            try:
                with open(file_path, 'r', encoding=enc, errors='ignore') as f:
                    content = f.read()
                break
            except Exception:
                continue
        
        if content is None:
            return results
        
        # Quét từng dòng
        lines = content.split('\n')
        for line_num, line in enumerate(lines, start=1):
            for pattern, description in patterns:
                try:
                    if re.search(pattern, line, re.IGNORECASE):
                        # Escape quotes trong line để ghi CSV
                        line_escaped = line.replace('"', '""').strip()
                        if len(line_escaped) > 200:
                            line_escaped = line_escaped[:200] + '...'
                        
                        results.append({
                            'file': str(file_path),
                            'line': line_num,
                            'pattern': description,
                            'content': line_escaped
                        })
                        break  # Chỉ ghi một lần cho mỗi dòng
                except re.error:
                    continue  # Bỏ qua pattern regex lỗi
                    
    except Exception as e:
        log_error(f"Lỗi khi đọc file {file_path}: {e}")
    
    return results


def scan_directory(directory: Path, extensions: List[str], progress_callback=None) -> List[Dict]:
    """
    Quét toàn bộ thư mục
    
    Args:
        directory: Đường dẫn thư mục
        extensions: Danh sách extension cần quét
        progress_callback: Callback để cập nhật progress
    
    Returns:
        list: Danh sách tất cả kết quả phát hiện
    """
    all_results = []
    total_files = 0
    scanned_files = 0
    
    # Đếm tổng số file
    for ext in extensions:
        total_files += len(list(directory.rglob(f'*{ext}')))
    
    # Quét từng file
    for ext in extensions:
        for file_path in directory.rglob(f'*{ext}'):
            if progress_callback:
                scanned_files += 1
                progress_callback(scanned_files, total_files, str(file_path))
            
            results = scan_file(file_path, extensions)
            all_results.extend(results)
    
    return all_results


def save_results_csv(results: List[Dict], output_path: Path):
    """
    Lưu kết quả ra file CSV
    
    Args:
        results: Danh sách kết quả
        output_path: Đường dẫn file CSV
    """
    try:
        with open(output_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['File', 'Line Number', 'Matched Pattern', 'Content'])
            
            for result in results:
                writer.writerow([
                    result['file'],
                    result['line'],
                    result['pattern'],
                    result['content']
                ])
        
        log_info(f"✅ Đã lưu kết quả CSV: {output_path}")
    except Exception as e:
        log_error(f"❌ Lỗi khi lưu CSV: {e}")


def print_summary(results: List[Dict]):
    """
    In tóm tắt kết quả
    
    Args:
        results: Danh sách kết quả
    """
    if not results:
        print(Colors.success("\n✅ Không phát hiện mã độc nào!"))
        return
    
    # Nhóm theo file
    files_dict = {}
    for result in results:
        file_path = result['file']
        if file_path not in files_dict:
            files_dict[file_path] = []
        files_dict[file_path].append(result)
    
    print(Colors.warning(f"\n⚠️  Phát hiện {len(results)} pattern nghi ngờ trong {len(files_dict)} file(s):"))
    print(Colors.muted("=" * 70))
    
    for file_path, file_results in files_dict.items():
        print(Colors.error(f"\n📄 {file_path} ({len(file_results)} pattern)"))
        for result in file_results[:5]:  # Chỉ hiển thị 5 dòng đầu
            print(Colors.muted(f"   Dòng {result['line']:4d}: {result['pattern']}"))
            print(Colors.muted(f"            {result['content'][:60]}..."))
        
        if len(file_results) > 5:
            print(Colors.muted(f"   ... và {len(file_results) - 5} pattern khác"))
    
    print(Colors.muted("\n" + "=" * 70))


def main():
    """Hàm main"""
    print_header()
    print(Colors.primary("  🔍 TOOL QUÉT VÀ PHÁT HIỆN MÃ ĐỘC"))
    print("=" * 70)
    print()
    
    # Bước 1: Nhập đường dẫn thư mục
    directory = get_user_input("Nhập đường dẫn thư mục cần quét: ", required=True)
    directory = normalize_path(directory)
    directory_path = Path(directory)
    
    if not directory_path.exists():
        print(Colors.error(f"❌ Thư mục không tồn tại: {directory}"))
        return 1
    
    if not directory_path.is_dir():
        print(Colors.error(f"❌ Đường dẫn không phải thư mục: {directory}"))
        return 1
    
    # Bước 2: Chọn loại file
    print("\n📋 Chọn loại file cần quét:")
    print("  1. PHP files (*.php)")
    print("  2. JavaScript files (*.js)")
    print("  3. Python files (*.py)")
    print("  4. Tất cả (PHP + JS + Python)")
    print("  5. Custom (nhập extension)")
    
    choice = get_user_input("Lựa chọn (1-5): ", required=True)
    
    if choice == '1':
        extensions = ['.php']
    elif choice == '2':
        extensions = ['.js']
    elif choice == '3':
        extensions = ['.py']
    elif choice == '4':
        extensions = ['.php', '.js', '.py']
    elif choice == '5':
        custom_ext = get_user_input("Nhập extension (vd: .php, .js): ", required=True)
        extensions = [custom_ext if custom_ext.startswith('.') else f'.{custom_ext}']
    else:
        print(Colors.error("❌ Lựa chọn không hợp lệ!"))
        return 1
    
    # Bước 3: Xác nhận
    print(f"\n📁 Thư mục: {directory}")
    print(f"📄 Loại file: {', '.join(extensions)}")
    if not confirm_action("Bắt đầu quét?"):
        print("❌ Đã hủy!")
        return 0
    
    # Bước 4: Quét
    print(f"\n🔍 Đang quét...")
    print(Colors.muted("=" * 70))
    
    def progress_callback(current, total, file_path):
        if current % 10 == 0 or current == total:
            percent = (current / total * 100) if total > 0 else 0
            print(f"\r{Colors.muted(f'Đã quét: {current}/{total} file ({percent:.1f}%)')} - {Path(file_path).name[:40]:<40}", end='', flush=True)
    
    results = scan_directory(directory_path, extensions, progress_callback)
    print()  # New line after progress
    
    # Bước 5: Hiển thị kết quả
    print_summary(results)
    
    # Bước 6: Lưu CSV
    if results:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        csv_path = directory_path / f"malware_scan_{timestamp}.csv"
        
        save_csv = confirm_action(f"\n💾 Lưu kết quả ra CSV?", default=True)
        if save_csv:
            save_results_csv(results, csv_path)
            print(Colors.success(f"📄 File CSV: {csv_path}"))
    
    print()
    print(Colors.success("✅ Hoàn tất!"))
    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print(Colors.warning("\n⚠️  Đã hủy bởi người dùng!"))
        sys.exit(130)
    except Exception as e:
        log_error(f"❌ Lỗi không mong muốn: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

