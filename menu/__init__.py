#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Menu ch√≠nh - Qu·∫£n l√Ω v√† ch·∫°y c√°c tools

M·ª•c ƒë√≠ch: Giao di·ªán t·∫≠p trung cho t·∫•t c·∫£ tools
L√Ω do: D·ªÖ d√†ng truy c·∫≠p v√† qu·∫£n l√Ω tools
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional

# Fix Windows console encoding - Simple way
if sys.platform == 'win32':
    try:
        import codecs
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
        sys.stderr.reconfigure(encoding='utf-8', errors='replace')
    except Exception:
        pass


class ToolManager:
    """
    Class qu·∫£n l√Ω tools
    
    M·ª•c ƒë√≠ch: T·∫≠p trung logic qu·∫£n l√Ω tools, favorites, history
    """
    
    def __init__(self, tool_dir: str):
        """
        Kh·ªüi t·∫°o ToolManager
        
        Args:
            tool_dir: Th∆∞ m·ª•c ch·ª©a tools
        """
        self.tool_dir = Path(tool_dir)
        self.config_file = Path("tool_config.json")
        self.config = self._load_config()
        
        # √Ånh x·∫° t√™n file sang t√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
        self.tool_names = {
            "backup-folder.py": "Sao l∆∞u v√† n√©n th∆∞ m·ª•c (c√≥ timestamp)",
            "clean-temp-files.py": "D·ªçn d·∫πp file t·∫°m, cache v√† file r√°c",
            "compress-images.py": "N√©n v√† ch·ªânh s·ª≠a ·∫£nh (resize, ƒë·ªïi format)",
            "copy-changed-files.py": "Sao ch√©p file thay ƒë·ªïi theo Git commit",
            "duplicate-finder.py": "T√¨m v√† x√≥a file tr√πng l·∫∑p",
            "extract-archive.py": "Gi·∫£i n√©n file (ZIP, RAR, 7Z, TAR)",
            "file-organizer.py": "S·∫Øp x·∫øp file (theo lo·∫°i/ng√†y/extension)",
            "find-and-replace.py": "T√¨m v√† thay th·∫ø text trong nhi·ªÅu file",
            "generate-tree.py": "T·∫°o s∆° ƒë·ªì c√¢y th∆∞ m·ª•c d·ª± √°n",
            "image-watermark.py": "Th√™m watermark v√†o ·∫£nh (text/logo h√†ng lo·∫°t)",
            "pdf-tools.py": "X·ª≠ l√Ω PDF (merge, split, compress, convert)",
            "rename-files.py": "ƒê·ªïi t√™n file h√†ng lo·∫°t (prefix/suffix/s·ªë th·ª© t·ª±)",
            "text-encoding-converter.py": "Chuy·ªÉn ƒë·ªïi encoding file text (UTF-8, ANSI...)",
            "video-converter.py": "X·ª≠ l√Ω video (convert, compress, trim, extract audio)"
        }
        
        # Tags cho m·ªói tool (ƒë·ªÉ search)
        self.tool_tags = {
            "backup-folder.py": ["backup", "sao luu", "nen", "zip", "tar"],
            "clean-temp-files.py": ["clean", "don dep", "temp", "cache", "rac"],
            "compress-images.py": ["image", "anh", "nen", "resize", "compress"],
            "copy-changed-files.py": ["git", "copy", "sao chep", "commit"],
            "duplicate-finder.py": ["duplicate", "trung lap", "xoa", "clean"],
            "extract-archive.py": ["extract", "giai nen", "zip", "rar", "7z"],
            "file-organizer.py": ["organize", "sap xep", "file", "thu muc"],
            "find-and-replace.py": ["find", "replace", "tim", "thay the", "text"],
            "generate-tree.py": ["tree", "cay", "thu muc", "structure"],
            "image-watermark.py": ["watermark", "anh", "logo", "copyright"],
            "pdf-tools.py": ["pdf", "merge", "split", "compress"],
            "rename-files.py": ["rename", "doi ten", "batch"],
            "text-encoding-converter.py": ["encoding", "utf8", "text", "convert"],
            "video-converter.py": ["video", "convert", "compress", "mp4"]
        }
    
    def _load_config(self) -> Dict:
        """
        Load config t·ª´ file
        
        Returns:
            dict: Config data
        
        Gi·∫£i th√≠ch:
        - L∆∞u favorites, recent tools, settings
        - T·∫°o config m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
        """
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                pass
        
        # Config m·∫∑c ƒë·ªãnh
        return {
            'favorites': [],
            'recent': [],
            'settings': {
                'show_descriptions': True,
                'max_recent': 10
            }
        }
    
    def _save_config(self):
        """L∆∞u config ra file"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói l∆∞u config: {e}")
    
    def get_tool_list(self) -> List[str]:
        """
        L·∫•y danh s√°ch file .py trong th∆∞ m·ª•c tool
        
        Returns:
            list: Danh s√°ch t√™n file tool
        """
        if not self.tool_dir.exists():
            return []
        
        tools = [f for f in os.listdir(self.tool_dir) if f.endswith('.py')]
        tools.sort()  # S·∫Øp x·∫øp theo alphabet
        return tools
    
    def search_tools(self, query: str) -> List[str]:
        """
        T√¨m ki·∫øm tool theo keyword
        
        Args:
            query: T·ª´ kh√≥a t√¨m ki·∫øm
        
        Returns:
            list: Danh s√°ch tool ph√π h·ª£p
        
        Gi·∫£i th√≠ch:
        - T√¨m trong t√™n file
        - T√¨m trong description
        - T√¨m trong tags
        """
        query = query.lower()
        results = []
        
        for tool in self.get_tool_list():
            # T√¨m trong t√™n file
            if query in tool.lower():
                results.append(tool)
                continue
            
            # T√¨m trong description
            description = self.tool_names.get(tool, "")
            if query in description.lower():
                results.append(tool)
                continue
            
            # T√¨m trong tags
            tags = self.tool_tags.get(tool, [])
            if any(query in tag for tag in tags):
                results.append(tool)
        
        return results
    
    def add_to_favorites(self, tool: str):
        """Th√™m tool v√†o favorites"""
        if tool not in self.config['favorites']:
            self.config['favorites'].append(tool)
            self._save_config()
            print(f"‚≠ê ƒê√£ th√™m v√†o favorites: {self.tool_names.get(tool, tool)}")
    
    def remove_from_favorites(self, tool: str):
        """X√≥a tool kh·ªèi favorites"""
        if tool in self.config['favorites']:
            self.config['favorites'].remove(tool)
            self._save_config()
            print(f"‚ùå ƒê√£ x√≥a kh·ªèi favorites: {self.tool_names.get(tool, tool)}")
    
    def add_to_recent(self, tool: str):
        """
        Th√™m tool v√†o recent
        
        Args:
            tool: T√™n file tool
        
        Gi·∫£i th√≠ch:
        - X√≥a tool n·∫øu ƒë√£ c√≥ trong list (ƒë·ªÉ move l√™n ƒë·∫ßu)
        - Th√™m v√†o ƒë·∫ßu list
        - Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng recent
        """
        if tool in self.config['recent']:
            self.config['recent'].remove(tool)
        
        self.config['recent'].insert(0, tool)
        
        # Gi·ªõi h·∫°n s·ªë recent
        max_recent = self.config['settings'].get('max_recent', 10)
        self.config['recent'] = self.config['recent'][:max_recent]
        
        self._save_config()
    
    def run_tool(self, tool: str) -> int:
        """
        Ch·∫°y tool
        
        Args:
            tool: T√™n file tool
        
        Returns:
            int: Exit code
        
        Gi·∫£i th√≠ch:
        - Ch·∫°y tool b·∫±ng subprocess
        - L∆∞u v√†o recent
        - Hi·ªÉn th·ªã th√¥ng b√°o
        """
        tool_path = self.tool_dir / tool
        
        if not tool_path.exists():
            print(f"‚ùå Tool kh√¥ng t·ªìn t·∫°i: {tool}")
            return 1
        
        print(f"\n{'='*60}")
        print(f">>> ƒêang ch·∫°y: {self.tool_names.get(tool, tool)}")
        print(f"{'='*60}\n")
        
        try:
            result = subprocess.run(["python", str(tool_path)])
            
            print(f"\n{'='*60}")
            print(f">>> Tool ƒë√£ ch·∫°y xong!")
            print(f"{'='*60}\n")
            
            # L∆∞u v√†o recent
            self.add_to_recent(tool)
            
            return result.returncode
        
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Tool b·ªã ng·∫Øt b·ªüi ng∆∞·ªùi d√πng")
            return 130
        
        except Exception as e:
            print(f"\n‚ùå L·ªói khi ch·∫°y tool: {e}")
            return 1
    
    def display_menu(self, tools: Optional[List[str]] = None, title: str = "DANH S√ÅCH TOOL"):
        """
        Hi·ªÉn th·ªã menu tools
        
        Args:
            tools: Danh s√°ch tools (None = hi·ªÉn th·ªã t·∫•t c·∫£)
            title: Ti√™u ƒë·ªÅ menu
        
        Gi·∫£i th√≠ch:
        - Hi·ªÉn th·ªã danh s√°ch ƒë·∫πp v·ªõi s·ªë th·ª© t·ª±
        - Highlight favorites
        - Hi·ªÉn th·ªã description
        """
        if tools is None:
            tools = self.get_tool_list()
        
        if not tools:
            print("‚ùå Kh√¥ng t√¨m th·∫•y tool n√†o!")
            return
        
        print(f"\n{'='*60}")
        print(f"  {title}")
        print(f"{'='*60}")
        
        for idx, tool in enumerate(tools, start=1):
            # Check favorite
            is_favorite = tool in self.config['favorites']
            star = "‚≠ê" if is_favorite else "  "
            
            # T√™n tool
            tool_name = self.tool_names.get(tool, tool)
            
            # Hi·ªÉn th·ªã
            print(f"{star} {idx}. {tool_name}")
        
        print(f"{'='*60}\n")
    
    def show_help(self):
        """Hi·ªÉn th·ªã help"""
        print("""
============================================================
                  HUONG DAN SU DUNG                       
============================================================

üìã L·ªÜNH C∆† B·∫¢N:
   [s·ªë]         - Ch·∫°y tool theo s·ªë th·ª© t·ª±
   h, help      - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y
   q, quit, 0   - Tho√°t ch∆∞∆°ng tr√¨nh

üîç T√åM KI·∫æM:
   s [keyword]  - T√¨m ki·∫øm tool
   /[keyword]   - T√¨m ki·∫øm tool (c√°ch kh√°c)
   
   V√≠ d·ª•: s backup, /image

‚≠ê FAVORITES:
   f            - Hi·ªÉn th·ªã danh s√°ch favorites
   f+ [s·ªë]      - Th√™m tool v√†o favorites
   f- [s·ªë]      - X√≥a tool kh·ªèi favorites
   
   V√≠ d·ª•: f+ 3, f- 1

üìö RECENT:
   r            - Hi·ªÉn th·ªã recent tools
   r[s·ªë]        - Ch·∫°y recent tool
   
   V√≠ d·ª•: r1 (ch·∫°y tool recent ƒë·∫ßu ti√™n)

‚öôÔ∏è  SETTINGS:
   set          - Xem/ch·ªânh s·ª≠a settings

üîÑ KH√ÅC:
   l, list      - Hi·ªÉn th·ªã l·∫°i danh s√°ch
   clear        - X√≥a m√†n h√¨nh
        """)


def main():
    """
    H√†m main - Menu ch√≠nh
    
    Gi·∫£i th√≠ch:
    - V√≤ng l·∫∑p ch√≠nh c·ªßa menu
    - X·ª≠ l√Ω input t·ª´ ng∆∞·ªùi d√πng
    - Dispatch ƒë·∫øn c√°c ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng
    """
    # Kh·ªüi t·∫°o ToolManager
    # __file__ l√† menu/__init__.py, c·∫ßn l√πi 1 c·∫•p l√™n project root
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    tool_dir = os.path.join(project_root, "tool")
    manager = ToolManager(tool_dir)
    
    # L·∫•y danh s√°ch tools
    tools = manager.get_tool_list()
    
    if not tools:
        print("‚ùå Kh√¥ng t√¨m th·∫•y tool n√†o trong th∆∞ m·ª•c tool/")
        return
    
    # Hi·ªÉn th·ªã banner
    print("""
============================================================
                  MY PYTHON TOOLS                         
              Bo cong cu Python tien ich                 
                                                          
         Nhap 'h' hoac 'help' de xem huong dan          
============================================================
    """)
    
    # Hi·ªÉn th·ªã menu l·∫ßn ƒë·∫ßu
    manager.display_menu(tools)
    
    # V√≤ng l·∫∑p ch√≠nh
    while True:
        try:
            # Nh·∫≠n input
            user_input = input(">>> Ch·ªçn tool (h=help, q=quit): ").strip()
            
            if not user_input:
                continue
            
            # Parse command
            parts = user_input.split(maxsplit=1)
            command = parts[0].lower()
            args = parts[1] if len(parts) > 1 else ""
            
            # X·ª≠ l√Ω command
            
            # Tho√°t
            if command in ['q', 'quit', '0', 'exit']:
                print("üëã T·∫°m bi·ªát!")
                break
            
            # Help
            elif command in ['h', 'help', '?']:
                manager.show_help()
            
            # List
            elif command in ['l', 'list']:
                manager.display_menu(tools)
            
            # Clear
            elif command == 'clear':
                os.system('cls' if os.name == 'nt' else 'clear')
                manager.display_menu(tools)
            
            # Search
            elif command in ['s', 'search'] or command.startswith('/'):
                if command.startswith('/'):
                    query = command[1:] + (" " + args if args else "")
                else:
                    query = args
                
                if not query:
                    print("‚ö†Ô∏è  Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
                    continue
                
                results = manager.search_tools(query)
                
                if results:
                    print(f"\nüîç T√¨m th·∫•y {len(results)} tool ph√π h·ª£p v·ªõi '{query}':")
                    manager.display_menu(results, title=f"K·∫æT QU·∫¢ T√åM KI·∫æM: {query}")
                else:
                    print(f"‚ùå Kh√¥ng t√¨m th·∫•y tool n√†o ph√π h·ª£p v·ªõi '{query}'")
            
            # Favorites
            elif command == 'f':
                favorites = manager.config['favorites']
                if favorites:
                    valid_favorites = [f for f in favorites if f in tools]
                    manager.display_menu(valid_favorites, title="FAVORITES")
                else:
                    print("‚≠ê Ch∆∞a c√≥ favorites n√†o")
            
            elif command.startswith('f+'):
                # Th√™m v√†o favorites
                try:
                    idx = int(args or command[2:])
                    if 1 <= idx <= len(tools):
                        tool = tools[idx - 1]
                        manager.add_to_favorites(tool)
                    else:
                        print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
                except ValueError:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            
            elif command.startswith('f-'):
                # X√≥a kh·ªèi favorites
                try:
                    idx = int(args or command[2:])
                    if 1 <= idx <= len(tools):
                        tool = tools[idx - 1]
                        manager.remove_from_favorites(tool)
                    else:
                        print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
                except ValueError:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            
            # Recent
            elif command == 'r':
                recent = manager.config['recent']
                if recent:
                    # L·ªçc ch·ªâ nh·ªØng tool c√≤n t·ªìn t·∫°i
                    valid_recent = [r for r in recent if r in tools]
                    manager.display_menu(valid_recent, title="RECENT TOOLS")
                else:
                    print("üìö Ch∆∞a c√≥ recent tools")
            
            elif command.startswith('r') and len(command) > 1:
                # Ch·∫°y recent tool
                try:
                    idx = int(command[1:])
                    recent = manager.config['recent']
                    
                    if 1 <= idx <= len(recent):
                        tool = recent[idx - 1]
                        if tool in tools:
                            manager.run_tool(tool)
                            manager.display_menu(tools)
                        else:
                            print(f"‚ùå Tool kh√¥ng t·ªìn t·∫°i: {tool}")
                    else:
                        print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
                except ValueError:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            
            # Settings
            elif command == 'set':
                print("\n‚öôÔ∏è  SETTINGS:")
                for key, value in manager.config['settings'].items():
                    print(f"   {key}: {value}")
                print()
            
            # Ch·∫°y tool theo s·ªë
            elif command.isdigit():
                idx = int(command)
                
                if 1 <= idx <= len(tools):
                    tool = tools[idx - 1]
                    manager.run_tool(tool)
                    # Hi·ªÉn th·ªã l·∫°i menu
                    manager.display_menu(tools)
                else:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            
            else:
                print(f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: {command}")
                print("üí° Nh·∫≠p 'h' ho·∫∑c 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n")
        
        except KeyboardInterrupt:
            print("\n\nüëã T·∫°m bi·ªát!")
            break
        
        except Exception as e:
            print(f"\n‚ùå L·ªói: {e}")


if __name__ == "__main__":
    main()
