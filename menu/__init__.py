#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Menu ch√≠nh - Giao di·ªán qu·∫£n l√Ω v√† ch·∫°y c√°c tools

M·ª•c ƒë√≠ch: Entry point cho menu system
L√Ω do: D·ªÖ d√†ng truy c·∫≠p v√† qu·∫£n l√Ω tools
"""

import os
import sys

# Fix Windows console encoding - Simple way
if sys.platform == 'win32':
    try:
        import codecs
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
        sys.stderr.reconfigure(encoding='utf-8', errors='replace')
    except Exception:
        pass

# Import ToolManager t·ª´ module ri√™ng
from .tool_manager import ToolManager


def main():
    """
    H√†m main - Menu ch√≠nh
    
    Gi·∫£i th√≠ch:
    - V√≤ng l·∫∑p ch√≠nh c·ªßa menu
    - X·ª≠ l√Ω input t·ª´ ng∆∞·ªùi d√πng
    - Dispatch ƒë·∫øn c√°c ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng
    """
    # Kh·ªüi t·∫°o ToolManager
    # __file__ l√† menu/__init__.py, c·∫ßn l√πi 1 c·∫•p l√™n project root
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    tool_dir = os.path.join(project_root, "tool")
    manager = ToolManager(tool_dir)
    
    # L·∫•y danh s√°ch tools
    tools = manager.get_tool_list()
    
    if not tools:
        print("‚ùå Kh√¥ng t√¨m th·∫•y tool n√†o trong th∆∞ m·ª•c tool/")
        return
    
    # Hi·ªÉn th·ªã banner
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                  MY PYTHON TOOLS                         ‚ïë
‚ïë              B·ªô c√¥ng c·ª• Python ti·ªán √≠ch                  ‚ïë
‚ïë                                                          ‚ïë
‚ïë         Nh·∫≠p 'h' ho·∫∑c 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # Hi·ªÉn th·ªã menu l·∫ßn ƒë·∫ßu
    manager.display_menu(tools)
    
    # V√≤ng l·∫∑p ch√≠nh
    while True:
        try:
            # Nh·∫≠n input
            user_input = input(">>> Ch·ªçn tool (h=help, q=quit): ").strip()
            
            if not user_input:
                continue
            
            # Parse command
            parts = user_input.split(maxsplit=1)
            command = parts[0].lower()
            args = parts[1] if len(parts) > 1 else ""
            
            # X·ª≠ l√Ω command
            
            # Tho√°t
            if command in ['q', 'quit', '0', 'exit']:
                print("üëã T·∫°m bi·ªát!")
                break
            
            # Help
            elif command in ['h', 'help', '?']:
                manager.show_help()
            
            # List
            elif command in ['l', 'list']:
                manager.display_menu(tools)
            
            # Clear
            elif command == 'clear':
                os.system('cls' if os.name == 'nt' else 'clear')
                manager.display_menu(tools)
            
            # Search
            elif command in ['s', 'search'] or command.startswith('/'):
                if command.startswith('/'):
                    query = command[1:] + (" " + args if args else "")
                else:
                    query = args
                
                if not query:
                    print("‚ö†Ô∏è  Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
                    continue
                
                results = manager.search_tools(query)
                
                if results:
                    print(f"\nüîç T√¨m th·∫•y {len(results)} tool ph√π h·ª£p v·ªõi '{query}':")
                    manager.display_menu(results, title=f"K·∫æT QU·∫¢ T√åM KI·∫æM: {query}")
                else:
                    print(f"‚ùå Kh√¥ng t√¨m th·∫•y tool n√†o ph√π h·ª£p v·ªõi '{query}'")
            
            # Favorites
            elif command == 'f':
                favorites = manager.config['favorites']
                if favorites:
                    valid_favorites = [f for f in favorites if f in tools]
                    manager.display_menu(valid_favorites, title="FAVORITES")
                else:
                    print("‚≠ê Ch∆∞a c√≥ favorites n√†o")
            
            elif command.startswith('f+'):
                # Th√™m v√†o favorites
                try:
                    idx = int(args or command[2:])
                    if 1 <= idx <= len(tools):
                        tool = tools[idx - 1]
                        manager.add_to_favorites(tool)
                    else:
                        print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
                except ValueError:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            
            elif command.startswith('f-'):
                # X√≥a kh·ªèi favorites
                try:
                    idx = int(args or command[2:])
                    if 1 <= idx <= len(tools):
                        tool = tools[idx - 1]
                        manager.remove_from_favorites(tool)
                    else:
                        print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
                except ValueError:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            
            # Recent
            elif command == 'r':
                recent = manager.config['recent']
                if recent:
                    # L·ªçc ch·ªâ nh·ªØng tool c√≤n t·ªìn t·∫°i
                    valid_recent = [r for r in recent if r in tools]
                    manager.display_menu(valid_recent, title="RECENT TOOLS")
                else:
                    print("üìö Ch∆∞a c√≥ recent tools")
            
            elif command.startswith('r') and len(command) > 1:
                # Ch·∫°y recent tool
                try:
                    idx = int(command[1:])
                    recent = manager.config['recent']
                    
                    if 1 <= idx <= len(recent):
                        tool = recent[idx - 1]
                        if tool in tools:
                            manager.run_tool(tool)
                            manager.display_menu(tools)
                        else:
                            print(f"‚ùå Tool kh√¥ng t·ªìn t·∫°i: {tool}")
                    else:
                        print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
                except ValueError:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            
            # Settings
            elif command == 'set':
                print("\n‚öôÔ∏è  SETTINGS:")
                for key, value in manager.config['settings'].items():
                    print(f"   {key}: {value}")
                print()
            
            # Ch·∫°y tool theo s·ªë
            elif command.isdigit():
                idx = int(command)
                
                if 1 <= idx <= len(tools):
                    tool = tools[idx - 1]
                    manager.run_tool(tool)
                    # Hi·ªÉn th·ªã l·∫°i menu
                    manager.display_menu(tools)
                else:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            
            else:
                print(f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: {command}")
                print("üí° Nh·∫≠p 'h' ho·∫∑c 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n")
        
        except KeyboardInterrupt:
            print("\n\nüëã T·∫°m bi·ªát!")
            break
        
        except Exception as e:
            print(f"\n‚ùå L·ªói: {e}")


if __name__ == "__main__":
    main()
